#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Codespace –∏–ª–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Estimate Service...\n');

class DevEnvironmentSetup {
  constructor() {
    this.rootPath = path.join(__dirname, '..');
    this.errors = [];
    this.warnings = [];
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  async setup() {
    try {
      console.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
      this.setupEnvironmentFiles();

      console.log('üóÑÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      this.setupDatabase();

      console.log('ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Copilot...');
      this.setupCopilotConfig();

      console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks...');
      this.setupGitHooks();

      console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
      this.checkDependencies();

      console.log('üß™ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...');
      this.setupTestEnvironment();

      this.printSummary();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', error.message);
      process.exit(1);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  setupEnvironmentFiles() {
    const envFiles = [
      {
        source: '.env.example',
        target: '.env',
        required: true
      },
      {
        source: 'mcp-server/.env.example',
        target: 'mcp-server/.env.local',
        required: true
      }
    ];

    for (const envFile of envFiles) {
      const sourcePath = path.join(this.rootPath, envFile.source);
      const targetPath = path.join(this.rootPath, envFile.target);

      if (!fs.existsSync(targetPath)) {
        if (fs.existsSync(sourcePath)) {
          fs.copyFileSync(sourcePath, targetPath);
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω ${envFile.target}`);
        } else if (envFile.required) {
          this.errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${envFile.source} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ${envFile.target}`);
        }
      } else {
        console.log(`‚ÑπÔ∏è  ${envFile.target} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.validateEnvironmentVariables();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  validateEnvironmentVariables() {
    const requiredVars = {
      '.env': ['DATABASE_URL', 'JWT_SECRET'],
      'mcp-server/.env.local': ['HF_TOKEN', 'HUGGINGFACE_MODEL_NAME']
    };

    for (const [file, vars] of Object.entries(requiredVars)) {
      const filePath = path.join(this.rootPath, file);
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');

        for (const varName of vars) {
          if (!content.includes(`${varName}=`)) {
            this.warnings.push(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${varName} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ ${file}`);
          }
        }
      }
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  setupDatabase() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

      // –ï—Å–ª–∏ DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!process.env.DATABASE_URL) {
        console.log('‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
      console.log('üî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞...');
      execSync('npx prisma generate', {
        stdio: 'inherit',
        cwd: this.rootPath
      });

    } catch (error) {
      this.warnings.push(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: ${error.message}`);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Copilot
   */
  setupCopilotConfig() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π Copilot
    const copilotExtensions = [
      'github.copilot',
      'github.copilot-chat',
      'github.copilot-labs'
    ];

    console.log('ü§ñ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Copilot:');
    copilotExtensions.forEach(ext => {
      console.log(`   - ${ext}`);
    });

    // –°–æ–∑–¥–∞–µ–º .vscode/launch.json –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.setupVSCodeLaunchConfig();

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Copilot –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    this.updateCopilotSettings();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ VS Code
   */
  setupVSCodeLaunchConfig() {
    const launchConfig = {
      version: "0.2.0",
      configurations: [
        {
          name: "üöÄ Debug Backend",
          type: "node",
          request: "launch",
          program: "${workspaceFolder}/node_modules/@nestjs/cli/bin/nest.js",
          args: ["start", "--debug", "--watch"],
          cwd: "${workspaceFolder}",
          env: {
            NODE_ENV: "development"
          },
          console: "integratedTerminal",
          restart: true,
          runtimeExecutable: "npm",
          runtimeArgs: ["run", "start:debug"]
        },
        {
          name: "üß™ Debug Tests",
          type: "node",
          request: "launch",
          program: "${workspaceFolder}/node_modules/.bin/jest",
          args: ["--runInBand"],
          cwd: "${workspaceFolder}",
          console: "integratedTerminal",
          internalConsoleOptions: "neverOpen"
        },
        {
          name: "ü§ñ Debug MCP Server",
          type: "node",
          request: "launch",
          program: "${workspaceFolder}/mcp-server/dist-simple/index-local-simple.js",
          cwd: "${workspaceFolder}/mcp-server",
          env: {
            NODE_ENV: "development",
            DEBUG: "mcp:*"
          },
          console: "integratedTerminal"
        }
      ]
    };

    const launchPath = path.join(this.rootPath, '.vscode', 'launch.json');
    if (!fs.existsSync(launchPath)) {
      fs.writeFileSync(launchPath, JSON.stringify(launchConfig, null, 2));
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω .vscode/launch.json');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Copilot
   */
  updateCopilotSettings() {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const projectSpecificSettings = {
      "github.copilot.chat.experimental.codeGeneration": true,
      "github.copilot.advanced.debug.useNodeDebugger": true,
      "github.copilot.conversation.welcomeMessage": "never"
    };

    console.log('‚ÑπÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Copilot –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks
   */
  setupGitHooks() {
    try {
      // –°–æ–∑–¥–∞–µ–º pre-commit hook
      const preCommitHook = `#!/bin/sh
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∫–æ–º–º–∏—Ç–æ–º

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º..."

# –õ–∏–Ω—Ç–∏–Ω–≥
npm run lint:all
if [ $? -ne 0 ]; then
  echo "‚ùå –û—à–∏–±–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º."
  exit 1
fi

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
npm run format:check
if [ $? -ne 0 ]; then
  echo "‚ö†Ô∏è  –ö–æ–¥ –Ω–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'npm run format'"
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
npm run type-check
if [ $? -ne 0 ]; then
  echo "‚ùå –û—à–∏–±–∫–∏ TypeScript. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º."
  exit 1
fi

echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
`;

      const hookPath = path.join(this.rootPath, '.git', 'hooks', 'pre-commit');
      if (fs.existsSync(path.join(this.rootPath, '.git'))) {
        fs.writeFileSync(hookPath, preCommitHook, { mode: 0o755 });
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω pre-commit hook');
      } else {
        this.warnings.push('Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

    } catch (error) {
      this.warnings.push(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git hooks: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  checkDependencies() {
    const requiredGlobalPackages = [
      'prisma',
      '@nestjs/cli',
      'typescript'
    ];

    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');

    for (const pkg of requiredGlobalPackages) {
      try {
        execSync(`npm list -g ${pkg}`, { stdio: 'ignore' });
        console.log(`‚úÖ ${pkg} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ`);
      } catch {
        this.warnings.push(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ: npm install -g ${pkg}`);
      }
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
   */
  setupTestEnvironment() {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const testDbUrl = 'postgresql://postgres:postgres@localhost:5432/estimate_service_test';

    const jestConfig = path.join(this.rootPath, 'jest.config.ts');
    if (fs.existsSync(jestConfig)) {
      console.log('‚úÖ Jest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      this.warnings.push('Jest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º playwright
    const playwrightConfig = path.join(this.rootPath, 'playwright.config.ts');
    if (fs.existsSync(playwrightConfig)) {
      console.log('‚úÖ Playwright –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      console.log('‚ÑπÔ∏è  Playwright –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    }
  }

  /**
   * –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  printSummary() {
    console.log('\n' + '='.repeat(50));
    console.log('üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('='.repeat(50));

    if (this.errors.length > 0) {
      console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
      this.errors.forEach(error => console.log(`   - ${error}`));
    }

    if (this.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
      this.warnings.forEach(warning => console.log(`   - ${warning}`));
    }

    console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è VS Code');
    console.log('   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–∞—Ö');
    console.log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev:all');
    console.log('   4. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000');

    console.log('\nü§ñ –†–ê–ë–û–¢–ê –° COPILOT:');
    console.log('   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+I –¥–ª—è inline chat');
    console.log('   - –û—Ç–∫—Ä–æ–π—Ç–µ Copilot Chat –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤');
    console.log('   - –ü—Ä–∏–º–µ—Ä: "–û–±—ä—è—Å–Ω–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"');

    console.log('\nüîó –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:');
    console.log('   npm run dev:all          # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
    console.log('   npm run test:all         # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤');
    console.log('   npm run docs:check       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
    console.log('   npx prisma studio        # UI –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');

    console.log('\n‚ú® –£–¥–∞—á–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å GitHub Copilot! ‚ú®\n');
  }
}

// –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
if (require.main === module) {
  const setup = new DevEnvironmentSetup();
  setup.setup().catch(console.error);
}

module.exports = DevEnvironmentSetup;
