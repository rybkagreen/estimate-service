#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/docs-metrics.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class DocumentationMetrics {
  constructor() {
    this.docsPath = path.join(__dirname, '..', 'docs');
    this.metrics = {};
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  countFiles() {
    const findFiles = (dir, extension) => {
      const files = [];
      const items = fs.readdirSync(dir, { withFileTypes: true });

      for (const item of items) {
        const fullPath = path.join(dir, item.name);
        if (item.isDirectory()) {
          files.push(...findFiles(fullPath, extension));
        } else if (item.name.endsWith(extension)) {
          files.push(fullPath);
        }
      }
      return files;
    };

    const mdFiles = findFiles(this.docsPath, '.md');
    const imageFiles = findFiles(this.docsPath, '.png')
      .concat(findFiles(this.docsPath, '.jpg'))
      .concat(findFiles(this.docsPath, '.gif'))
      .concat(findFiles(this.docsPath, '.svg'));

    this.metrics.files = {
      markdown: mdFiles.length,
      images: imageFiles.length,
      total: mdFiles.length + imageFiles.length
    };

    return mdFiles;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
   */
  analyzeContent(files) {
    let totalLines = 0;
    let totalWords = 0;
    let totalCharacters = 0;
    const largestFiles = [];

    for (const file of files) {
      try {
        const content = fs.readFileSync(file, 'utf8');
        const lines = content.split('\n').length;
        const words = content.split(/\s+/).filter(word => word.length > 0).length;
        const characters = content.length;

        totalLines += lines;
        totalWords += words;
        totalCharacters += characters;

        largestFiles.push({
          file: path.relative(this.docsPath, file),
          lines,
          words,
          size: Math.round(characters / 1024 * 100) / 100 // KB
        });
      } catch (error) {
        console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: ${file}`);
      }
    }

    this.metrics.content = {
      totalLines,
      totalWords,
      totalCharacters,
      averageWordsPerFile: Math.round(totalWords / files.length),
      largestFiles: largestFiles
        .sort((a, b) => b.lines - a.lines)
        .slice(0, 5)
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  checkStructure() {
    const requiredFiles = [
      'README.md',
      'architecture/SYSTEM_ARCHITECTURE.md',
      'development/CODING_STANDARDS.md',
      'api/API_REFERENCE.md',
      'user-guides/QUICK_START_GUIDE.md',
      'standards/DOCUMENTATION_STANDARDS.md'
    ];

    const missingFiles = [];
    const existingFiles = [];

    for (const file of requiredFiles) {
      const fullPath = path.join(this.docsPath, file);
      if (fs.existsSync(fullPath)) {
        existingFiles.push(file);
      } else {
        missingFiles.push(file);
      }
    }

    this.metrics.structure = {
      requiredFiles: requiredFiles.length,
      existingFiles: existingFiles.length,
      missingFiles: missingFiles.length,
      completeness: Math.round((existingFiles.length / requiredFiles.length) * 100),
      missing: missingFiles
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  analyzeRecentChanges() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã, –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      const recentFiles = execSync(
        `find ${this.docsPath} -name "*.md" -mtime -30`,
        { encoding: 'utf8' }
      ).trim().split('\n').filter(f => f);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
      const commitStats = execSync(
        `git log --since="30 days ago" --oneline --grep="docs" | wc -l`,
        { encoding: 'utf8', cwd: path.join(__dirname, '..') }
      ).trim();

      this.metrics.activity = {
        recentlyModified: recentFiles.length,
        documentationCommits: parseInt(commitStats) || 0,
        lastMonth: true
      };
    } catch (error) {
      this.metrics.activity = {
        recentlyModified: 0,
        documentationCommits: 0,
        error: 'Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫
   */
  checkLinks() {
    const files = this.countFiles();
    let totalLinks = 0;
    let internalLinks = 0;
    let externalLinks = 0;
    const brokenLinks = [];

    const linkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;

    for (const file of files) {
      try {
        const content = fs.readFileSync(file, 'utf8');
        let match;

        while ((match = linkRegex.exec(content)) !== null) {
          totalLinks++;
          const url = match[2];

          if (url.startsWith('http')) {
            externalLinks++;
          } else {
            internalLinks++;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            const relativePath = path.resolve(path.dirname(file), url);
            if (!fs.existsSync(relativePath)) {
              brokenLinks.push({
                file: path.relative(this.docsPath, file),
                link: url,
                text: match[1]
              });
            }
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${file}`);
      }
    }

    this.metrics.links = {
      total: totalLinks,
      internal: internalLinks,
      external: externalLinks,
      broken: brokenLinks.length,
      brokenDetails: brokenLinks.slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
   */
  generateReport() {
    console.log('üìö –û–¢–ß–ï–¢ –ü–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò');
    console.log('='.repeat(50));
    console.log();

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
    console.log(`üìÑ –§–∞–π–ª–æ–≤ Markdown: ${this.metrics.files.markdown}`);
    console.log(`üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${this.metrics.files.images}`);
    console.log(`üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${this.metrics.content.totalLines.toLocaleString()}`);
    console.log(`üìñ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ${this.metrics.content.totalWords.toLocaleString()}`);
    console.log(`üìè –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤ –Ω–∞ —Ñ–∞–π–ª: ${this.metrics.content.averageWordsPerFile}`);
    console.log();

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞
    console.log('üèóÔ∏è  –°–¢–†–£–ö–¢–£–†–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò');
    console.log(`‚úÖ –ü–æ–ª–Ω–æ—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${this.metrics.structure.completeness}%`);
    console.log(`üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${this.metrics.structure.requiredFiles}`);
    console.log(`‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: ${this.metrics.structure.existingFiles}`);
    if (this.metrics.structure.missingFiles > 0) {
      console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: ${this.metrics.structure.missingFiles}`);
      this.metrics.structure.missing.forEach(file => {
        console.log(`   - ${file}`);
      });
    }
    console.log();

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    console.log('üîÑ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –û–ë–ù–û–í–õ–ï–ù–ò–ô');
    console.log(`üìÖ –§–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (30 –¥–Ω–µ–π): ${this.metrics.activity.recentlyModified}`);
    console.log(`üíæ –ö–æ–º–º–∏—Ç–æ–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π (30 –¥–Ω–µ–π): ${this.metrics.activity.documentationCommits}`);
    console.log();

    // –°—Å—ã–ª–∫–∏
    console.log('üîó –ê–ù–ê–õ–ò–ó –°–°–´–õ–û–ö');
    console.log(`üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: ${this.metrics.links.total}`);
    console.log(`üè† –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö: ${this.metrics.links.internal}`);
    console.log(`üåê –í–Ω–µ—à–Ω–∏—Ö: ${this.metrics.links.external}`);
    if (this.metrics.links.broken > 0) {
      console.log(`‚ùå –°–ª–æ–º–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${this.metrics.links.broken}`);
      this.metrics.links.brokenDetails.forEach(link => {
        console.log(`   - ${link.file}: "${link.text}" -> ${link.link}`);
      });
    } else {
      console.log(`‚úÖ –í—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç`);
    }
    console.log();

    // –¢–æ–ø —Ñ–∞–π–ª–æ–≤
    console.log('üìã –¢–û–ü-5 –°–ê–ú–´–• –ë–û–õ–¨–®–ò–• –§–ê–ô–õ–û–í');
    this.metrics.content.largestFiles.forEach((file, index) => {
      console.log(`${index + 1}. ${file.file}`);
      console.log(`   üìè ${file.lines} —Å—Ç—Ä–æ–∫, ${file.words} —Å–ª–æ–≤, ${file.size} KB`);
    });
    console.log();

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.generateRecommendations();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  generateRecommendations() {
    console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    console.log('-'.repeat(30));

    const recommendations = [];

    if (this.metrics.structure.completeness < 100) {
      recommendations.push(`üìã –°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (${this.metrics.structure.missingFiles} —Ñ–∞–π–ª–æ–≤)`);
    }

    if (this.metrics.activity.recentlyModified === 0) {
      recommendations.push('üîÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å');
    }

    if (this.metrics.links.broken > 0) {
      recommendations.push(`üîó –ò—Å–ø—Ä–∞–≤–∏—Ç—å ${this.metrics.links.broken} —Å–ª–æ–º–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`);
    }

    if (this.metrics.content.averageWordsPerFile < 100) {
      recommendations.push('üìù –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (—Å—Ä–µ–¥–Ω–∏–π —Ñ–∞–π–ª –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π)');
    }

    if (this.metrics.files.images === 0) {
      recommendations.push('üñºÔ∏è  –î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è');
    }

    if (recommendations.length === 0) {
      console.log('üéâ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ù–∏–∫–∞–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.');
    } else {
      recommendations.forEach((rec, index) => {
        console.log(`${index + 1}. ${rec}`);
      });
    }
    console.log();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ JSON
   */
  saveMetrics() {
    const outputPath = path.join(__dirname, '..', 'docs-metrics.json');
    const reportData = {
      timestamp: new Date().toISOString(),
      metrics: this.metrics,
      summary: {
        health: this.calculateHealthScore(),
        recommendations: this.getRecommendationsCount()
      }
    };

    fs.writeFileSync(outputPath, JSON.stringify(reportData, null, 2));
    console.log(`üíæ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);
  }

  /**
   * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  calculateHealthScore() {
    let score = 100;

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (40% –≤–µ—Å–∞)
    score -= (100 - this.metrics.structure.completeness) * 0.4;

    // –°—Å—ã–ª–∫–∏ (30% –≤–µ—Å–∞)
    if (this.metrics.links.total > 0) {
      const brokenPercentage = (this.metrics.links.broken / this.metrics.links.total) * 100;
      score -= brokenPercentage * 0.3;
    }

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (30% –≤–µ—Å–∞)
    if (this.metrics.activity.recentlyModified === 0) {
      score -= 30;
    }

    return Math.max(0, Math.round(score));
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  getRecommendationsCount() {
    let count = 0;

    if (this.metrics.structure.completeness < 100) count++;
    if (this.metrics.activity.recentlyModified === 0) count++;
    if (this.metrics.links.broken > 0) count++;
    if (this.metrics.content.averageWordsPerFile < 100) count++;
    if (this.metrics.files.images === 0) count++;

    return count;
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  run() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...\n');

    try {
      const files = this.countFiles();
      this.analyzeContent(files);
      this.checkStructure();
      this.analyzeRecentChanges();
      this.checkLinks();

      this.generateReport();
      this.saveMetrics();

      const healthScore = this.calculateHealthScore();
      console.log(`üè• –û–±—â–∏–π –∏–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤—å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${healthScore}/100`);

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ exit code –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
      if (this.metrics.structure.completeness < 80 || this.metrics.links.broken > 5) {
        process.exit(1);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const metrics = new DocumentationMetrics();
metrics.run();
