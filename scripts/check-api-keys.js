#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/check-api-keys.js
 */

const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envPath = path.resolve('.env');
if (fs.existsSync(envPath)) {
  dotenv.config({ path: envPath });
} else {
  console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.log('–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
  process.exit(1);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
const apiConfigs = [
  {
    name: 'DeepSeek API',
    keys: ['DEEPSEEK_API_KEY', 'DEEPSEEK_MODEL', 'DEEPSEEK_BASE_URL'],
    validate: (key, value) => {
      if (key === 'DEEPSEEK_API_KEY') {
        return value && value.startsWith('sk-') && value.length > 20;
      }
      return !!value;
    }
  },
  {
    name: 'Hugging Face API',
    keys: ['HUGGINGFACE_API_KEY', 'HF_TOKEN'],
    optional: true,
    validate: (key, value) => {
      if (!value) return true; // Optional
      return value.startsWith('hf_') && value.length > 10;
    }
  },
  {
    name: '–§–°–ë–¶ API',
    keys: ['FSBC_API_KEY', 'FSBC_API_SECRET', 'FSBC_API_URL', 'FSBC_REGION_CODE'],
    optional: true,
    validate: (key, value) => {
      if (!value) return true; // Optional
      if (key === 'FSBC_REGION_CODE') {
        return /^\d{2,3}$/.test(value);
      }
      return value.length > 0;
    }
  },
  {
    name: 'Grand Smeta API',
    keys: ['GRAND_SMETA_API_KEY', 'GRAND_SMETA_API_URL'],
    optional: true,
    validate: (key, value) => !!value || true // Optional
  },
  {
    name: 'MCP Server',
    keys: ['MCP_SERVER_PORT', 'MCP_SERVER_HOST', 'MCP_LOG_LEVEL'],
    validate: (key, value) => {
      if (key === 'MCP_SERVER_PORT') {
        const port = parseInt(value);
        return port > 0 && port < 65536;
      }
      if (key === 'MCP_LOG_LEVEL') {
        return ['error', 'warn', 'info', 'debug'].includes(value);
      }
      return !!value;
    }
  },
  {
    name: 'Security',
    keys: ['JWT_SECRET', 'MASTER_API_KEY', 'ENCRYPTION_KEY'],
    validate: (key, value) => value && value.length >= 32
  },
  {
    name: 'Database',
    keys: ['DATABASE_URL'],
    validate: (key, value) => value && value.startsWith('postgresql://')
  }
];

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function checkApiKeys() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π...\n');
  
  let hasErrors = false;
  let hasWarnings = false;

  apiConfigs.forEach(config => {
    console.log(`üì¶ ${config.name}:`);
    
    config.keys.forEach(key => {
      const value = process.env[key];
      const isValid = config.validate ? config.validate(key, value) : !!value;
      
      if (!value) {
        if (config.optional) {
          console.log(`  ‚ö†Ô∏è  ${key}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)`);
          hasWarnings = true;
        } else {
          console.log(`  ‚ùå ${key}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`);
          hasErrors = true;
        }
      } else if (!isValid) {
        console.log(`  ‚ùå ${key}: –ù–ï–í–ê–õ–ò–î–ù–û–ï –ó–ù–ê–ß–ï–ù–ò–ï`);
        hasErrors = true;
      } else {
        // –ú–∞—Å–∫–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const maskedValue = maskValue(key, value);
        console.log(`  ‚úÖ ${key}: ${maskedValue}`);
      }
    });
    
    console.log('');
  });

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ NODE_ENV
  const nodeEnv = process.env.NODE_ENV || 'development';
  console.log(`  ‚ÑπÔ∏è  NODE_ENV: ${nodeEnv}`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
  const ports = [
    { name: 'API Port', key: 'PORT', default: '3022' },
    { name: 'MCP Server Port', key: 'MCP_SERVER_PORT', default: '3333' }
  ];
  
  ports.forEach(({ name, key, default: defaultValue }) => {
    const port = process.env[key] || defaultValue;
    console.log(`  ‚ÑπÔ∏è  ${name}: ${port}`);
  });

  console.log('\n' + '='.repeat(50));
  
  if (hasErrors) {
    console.log('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!');
    console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    process.exit(1);
  } else if (hasWarnings) {
    console.log('\n‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.');
    console.log('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
  } else {
    console.log('\n‚úÖ –í—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  }
}

// –§—É–Ω–∫—Ü–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
function maskValue(key, value) {
  if (!value) return '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù';
  
  // –î–ª—è URL –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–º–µ–Ω
  if (value.includes('://')) {
    try {
      const url = new URL(value);
      return `${url.protocol}//${url.hostname}...`;
    } catch {
      return value.substring(0, 20) + '...';
    }
  }
  
  // –î–ª—è –∫–ª—é—á–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
  if (key.includes('KEY') || key.includes('SECRET') || key.includes('TOKEN')) {
    if (value.length > 10) {
      return value.substring(0, 6) + '...' + value.substring(value.length - 4);
    }
    return '*'.repeat(value.length);
  }
  
  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
  return value;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkApiKeys();
