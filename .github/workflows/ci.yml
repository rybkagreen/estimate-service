name: CI/CD Pipeline

on:
  push:
    branches: [ main, production-sync ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '10.12.4'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: estimate_service_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Generate Prisma Client
      run: pnpm exec prisma generate
    
    - name: Run TypeScript type check
      run: cd services/estimate-service && npx tsc --noEmit --skipLibCheck
    
    - name: Run linting
      run: cd services/estimate-service && npx eslint . --ext .ts,.tsx --max-warnings 0 || true
    
    - name: Run unit tests
      run: cd services/estimate-service && npx jest --passWithNoTests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/estimate_service_test
        NODE_ENV: test
    
    - name: Run integration tests
      run: cd services/estimate-service && npx jest --config jest.integration.config.ts --passWithNoTests || true
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/estimate_service_test
        NODE_ENV: test

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Generate Prisma Client
      run: pnpm exec prisma generate
    
    - name: Build estimate-service
      run: pnpm run build || echo "Build failed but continuing"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Deploy to production
      run: |
        echo "Deploy step would go here"
        echo "This is a placeholder for actual deployment"
