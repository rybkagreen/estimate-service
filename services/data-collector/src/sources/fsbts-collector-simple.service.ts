/**
 * –°–µ—Ä–≤–∏—Å-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –∏ ETL-–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –§–°–ë–¶-2022
 * –°–æ–≥–ª–∞—Å–Ω–æ ROADMAP –≠—Ç–∞–ø 1.1 - –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –§–°–ë–¶-2022
 */

import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { MinstroyParserService } from './minstroyrf-parser.service';
import { RegionalDataService } from './regional-data.service';
import { NormativesParserService } from './normatives-parser.service';
import { MarketPricesService } from './market-prices.service';

import { CollectionResult, FsbtsWorkItem, DataSource } from '../types/common.types';

@Injectable()
export class FsbtsCollectorService {
  private readonly logger = new Logger(FsbtsCollectorService.name);

  constructor(
    private readonly minstroyParser: MinstroyParserService,
    private readonly regionalDataService: RegionalDataService,
    private readonly normativesParser: NormativesParserService,
    private readonly marketPricesService: MarketPricesService,
    private readonly prisma: PrismaService,
  ) {}

  /**
   * –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  async collectAllData(): Promise<CollectionResult> {
    const overallResult: CollectionResult = {
      success: true,
      totalItems: 0,
      processedItems: 0,
      errors: [],
      source: 'all',
      timestamp: new Date(),
    };

    try {
      this.logger.log('üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –§–°–ë–¶-2022');

      // 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –ú–∏–Ω—Å—Ç—Ä–æ—è –†–§
      const minstroyResult = await this.collectMinstroyData();
      this.mergeResults(overallResult, minstroyResult);

      // 2. –°–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const regionalResult = await this.collectRegionalData();
      this.mergeResults(overallResult, regionalResult);

      // 3. –°–±–æ—Ä –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const normativeResult = await this.collectNormativeData();
      this.mergeResults(overallResult, normativeResult);

      // 4. –°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const marketResult = await this.collectMarketPrices();
      this.mergeResults(overallResult, marketResult);

      this.logger.log(
        `‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${overallResult.processedItems}/${overallResult.totalItems}`,
      );
    } catch (error) {
      this.logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      overallResult.success = false;
      overallResult.errors.push(
        `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      );
    }

    return overallResult;
  }

  /**
   * –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –ú–∏–Ω—Å—Ç—Ä–æ—è –†–§
   */
  private async collectMinstroyData(): Promise<CollectionResult> {
    this.logger.log('–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –ú–∏–Ω—Å—Ç—Ä–æ—è –†–§');

    try {
      const result = await this.minstroyParser.collectAndParseDocuments();
      return result;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –ú–∏–Ω—Å—Ç—Ä–æ—è:', error);
      return {
        success: false,
        totalItems: 0,
        processedItems: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'],
        source: 'minstroyrf',
        timestamp: new Date(),
      };
    }
  }

  /**
   * –°–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private async collectRegionalData(): Promise<CollectionResult> {
    this.logger.log('–°–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');

    try {
      const regions = await this.regionalDataService.getAvailableRegions();
      const results = await Promise.all(
        regions.map(region => this.regionalDataService.collectRegionalData(region)),
      );

      const totalItems = results.reduce((sum, r) => sum + r.items.length, 0);
      const successfulItems = results.filter(r => r.success).length;
      const allErrors = results.flatMap(r => r.errors);

      return {
        success: allErrors.length === 0,
        totalItems,
        processedItems: successfulItems,
        errors: allErrors,
        source: 'regional',
        timestamp: new Date(),
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return {
        success: false,
        totalItems: 0,
        processedItems: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'],
        source: 'regional',
        timestamp: new Date(),
      };
    }
  }

  /**
   * –°–±–æ—Ä –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private async collectNormativeData(): Promise<CollectionResult> {
    this.logger.log('–°–±–æ—Ä –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');

    try {
      const documents = await this.normativesParser.getAvailableDocuments();
      const results = await Promise.all(
        documents.map(doc => this.normativesParser.parseNormativeDocument(doc)),
      );

      const totalItems = results.reduce((sum, r) => sum + r.items.length, 0);
      const successfulItems = results.filter(r => r.success).length;
      const allErrors = results.flatMap(r => r.errors);

      return {
        success: allErrors.length === 0,
        totalItems,
        processedItems: successfulItems,
        errors: allErrors,
        source: 'normatives',
        timestamp: new Date(),
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return {
        success: false,
        totalItems: 0,
        processedItems: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'],
        source: 'normatives',
        timestamp: new Date(),
      };
    }
  }

  /**
   * –°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω
   */
  private async collectMarketPrices(): Promise<CollectionResult> {
    this.logger.log('–°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω');

    try {
      const updateResult = await this.marketPricesService.updateMarketPrices();

      return {
        success: updateResult.errors.length === 0,
        totalItems: updateResult.updated,
        processedItems: updateResult.updated,
        errors: updateResult.errors,
        source: 'market',
        timestamp: new Date(),
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return {
        success: false,
        totalItems: 0,
        processedItems: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'],
        source: 'market',
        timestamp: new Date(),
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –§–°–ë–¶-2022
   */
  async getAllItems(): Promise<any[]> {
    try {
      const items = await this.prisma.fSBTSItem.findMany({
        take: 1000, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      });

      return items;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –§–°–ë–¶:', error);
      return [];
    }
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∞
   */
  private mergeResults(target: CollectionResult, source: CollectionResult): void {
    target.totalItems += source.totalItems;
    target.processedItems += source.processedItems;
    target.errors.push(...source.errors);

    if (!source.success) {
      target.success = false;
    }
  }
}
