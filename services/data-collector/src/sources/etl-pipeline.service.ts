/**
 * ETL Pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –§–°–ë–¶-2022
 * –°–æ–≥–ª–∞—Å–Ω–æ ROADMAP –≠—Ç–∞–ø 1.1 - –°–æ–∑–¥–∞–Ω–∏–µ ETL-–ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { PrismaService } from '../prisma/prisma.service';
import { FileDownloadService } from '../services/file-download.service';
import { FileParserService } from '../services/file-parser.service';
import { ValidationService } from '../services/validation.service';
import { FsbtsCollectorService } from './fsbts-collector.service';

export interface ETLConfig {
  batchSize: number;
  maxRetries: number;
  enableTransformation: boolean;
  validateBeforeLoad: boolean;
  skipDuplicates: boolean;
}

export interface ETLJob {
  id: string;
  name: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  startTime: Date;
  endTime?: Date;
  recordsProcessed: number;
  recordsLoaded: number;
  errors: string[];
}

export interface ETLStats {
  totalJobs: number;
  successfulJobs: number;
  failedJobs: number;
  totalRecordsProcessed: number;
  averageProcessingTime: number;
  lastRunTime: Date;
}

@Injectable()
export class ETLPipelineService {
  private readonly logger = new Logger(ETLPipelineService.name);

  private config: ETLConfig = {
    batchSize: 1000,
    maxRetries: 3,
    enableTransformation: true,
    validateBeforeLoad: true,
    skipDuplicates: true,
  };

  private jobs: Map<string, ETLJob> = new Map();
  private isRunning = false;

  constructor(
    private readonly prismaService: PrismaService,
    private readonly fileDownloadService: FileDownloadService,
    private readonly fileParserService: FileParserService,
    private readonly validationService: ValidationService,
    private readonly fsbtsCollectorService: FsbtsCollectorService,
  ) {}

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ ETL pipeline –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
   * –°–æ–≥–ª–∞—Å–Ω–æ ROADMAP: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
   */
  @Cron('0 */6 * * *', {
    name: 'etl-pipeline-scheduled',
    timeZone: 'Europe/Moscow',
  })
  async scheduledETLRun(): Promise<void> {
    this.logger.log('‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ ETL –ø—Ä–æ—Ü–µ—Å—Å–∞');
    await this.runFullPipeline();
  }

  /**
   * –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ ETL –ø–∞–π–ø–ª–∞–π–Ω–∞
   */
  async runFullPipeline(): Promise<ETLJob> {
    if (this.isRunning) {
      throw new Error('ETL –ø–∞–π–ø–ª–∞–π–Ω —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    }

    const jobId = this.generateJobId();
    const job: ETLJob = {
      id: jobId,
      name: 'Full ETL Pipeline',
      status: 'running',
      startTime: new Date(),
      recordsProcessed: 0,
      recordsLoaded: 0,
      errors: [],
    };

    this.jobs.set(jobId, job);
    this.isRunning = true;

    try {
      this.logger.log(`üöÄ –ó–∞–ø—É—Å–∫ ETL –ø–∞–π–ø–ª–∞–π–Ω–∞ [Job: ${jobId}]`);

      // EXTRACT: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const extractedData = await this.extractData(job);

      // TRANSFORM: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const transformedData = await this.transformData(extractedData, job);

      // LOAD: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
      await this.loadData(transformedData, job);

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      job.status = 'completed';
      job.endTime = new Date();

      this.logger.log(
        `‚úÖ ETL –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω [Job: ${jobId}]. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${job.recordsProcessed}, –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${job.recordsLoaded}`,
      );
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ETL –ø–∞–π–ø–ª–∞–π–Ω–µ [Job: ${jobId}]:`, error);
      job.status = 'failed';
      job.endTime = new Date();
      job.errors.push(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      this.isRunning = false;
    }

    return job;
  }

  /**
   * EXTRACT: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  private async extractData(job: ETLJob): Promise<any[]> {
    this.logger.log('üì• EXTRACT: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');

    const extractedData: any[] = [];

    try {
      // 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –§–°–ë–¶-2022
      const fsbtsData = await this.fsbtsCollectorService.getAllItems();
      extractedData.push(...fsbtsData.map((item: any) => ({ ...item, source: 'fsbts' })));

      // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      const downloadedFiles = await this.fileDownloadService.getDownloadedFiles();

      // 3. –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤
      for (const fileName of downloadedFiles) {
        const filePath = `${this.fileDownloadService.getDownloadDir()}/${fileName}`;
        const parseResult = await this.fileParserService.parseFile(filePath);

        if (parseResult.success && parseResult.data) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          const structuredData = this.fileParserService.extractStructuredData(
            parseResult.data.content,
            this.determineFileType(fileName),
          );
          extractedData.push(
            ...structuredData.map(item => ({ ...item, source: 'file', fileName })),
          );
        }
      }

      job.recordsProcessed = extractedData.length;
      this.logger.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ ${extractedData.length} –∑–∞–ø–∏—Å–µ–π`);

      return extractedData;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–∑–µ EXTRACT:', error);
      job.errors.push(`EXTRACT: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      throw error;
    }
  }

  /**
   * TRANSFORM: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  private async transformData(data: any[], job: ETLJob): Promise<any[]> {
    if (!this.config.enableTransformation) {
      this.logger.log('‚è≠Ô∏è TRANSFORM: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return data;
    }

    this.logger.log('üîÑ TRANSFORM: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');

    const transformedData: any[] = [];
    let transformErrors = 0;

    for (const record of data) {
      try {
        const transformed = await this.transformRecord(record);

        if (transformed) {
          transformedData.push(transformed);
        }
      } catch (error) {
        this.logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏:`, error);
        transformErrors++;

        if (transformErrors < 10) {
          // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
          job.errors.push(
            `TRANSFORM: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          );
        }
      }
    }

    this.logger.log(
      `üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${transformedData.length} –∑–∞–ø–∏—Å–µ–π, –æ—à–∏–±–æ–∫: ${transformErrors}`,
    );
    return transformedData;
  }

  /**
   * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
   */
  private async transformRecord(record: any): Promise<any | null> {
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
    if (record.code) {
      record.code = this.normalizeCode(record.code);
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã
    if (record.price || record.basePrice) {
      record.normalizedPrice = this.normalizePrice(record.price || record.basePrice);
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if (record.unit) {
      record.normalizedUnit = this.normalizeUnit(record.unit);
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    record.category = this.determineCategory(record);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (this.config.validateBeforeLoad) {
      const validationResult = this.validationService.validateFerItem({
        code: record.code,
        name: record.name,
        unit: record.normalizedUnit,
        price: record.normalizedPrice,
      });

      if (!validationResult.isValid) {
        return null;
      }
    }

    return record;
  }

  /**
   * LOAD: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async loadData(data: any[], job: ETLJob): Promise<void> {
    this.logger.log('üíæ LOAD: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...');

    let loadedCount = 0;
    let skippedCount = 0;
    const batches = this.chunkArray(data, this.config.batchSize);

    for (const batch of batches) {
      try {
        const results = await this.loadBatch(batch);
        loadedCount += results.loaded;
        skippedCount += results.skipped;
      } catch (error) {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ batch:', error);
        job.errors.push(`LOAD: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ –æ–¥–Ω–æ–π
        for (const record of batch) {
          try {
            await this.loadSingleRecord(record);
            loadedCount++;
          } catch (singleError) {
            this.logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏ ${record.code}:`, singleError);
          }
        }
      }
    }

    job.recordsLoaded = loadedCount;
    this.logger.log(`üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loadedCount} –∑–∞–ø–∏—Å–µ–π, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount}`);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–∫–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π
   */
  private async loadBatch(batch: any[]): Promise<{ loaded: number; skipped: number }> {
    let loaded = 0;
    let skipped = 0;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    await this.prismaService.$transaction(async prisma => {
      for (const record of batch) {
        try {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
          if (this.config.skipDuplicates) {
            const existing = await prisma.fSBTSItem.findUnique({
              where: { code: record.code },
            });

            if (existing) {
              skipped++;
              continue;
            }
          }

          // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
          await prisma.fSBTSItem.create({
            data: {
              code: record.code,
              name: record.name,
              unit: record.normalizedUnit || record.unit,
              basePrice: record.normalizedPrice || record.price || record.basePrice,
              laborCost: record.laborCost || 0,
              materialCost: record.materialCost || 0,
              machineCost: record.machineCost || 0,
              source: record.source || 'unknown',
              chapter: record.chapter || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
              category: record.category || 'general',
              validFrom: record.validFrom || new Date(),
              metadata: record.metadata || {},
            },
          });

          loaded++;
        } catch (error) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          if ((error as any).code === 'P2002') {
            skipped++;
          } else {
            throw error;
          }
        }
      }
    });

    return { loaded, skipped };
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
   */
  private async loadSingleRecord(record: any): Promise<void> {
    await this.prismaService.fSBTSItem.upsert({
      where: { code: record.code },
      update: {
        name: record.name,
        unit: record.normalizedUnit || record.unit,
        basePrice: record.normalizedPrice || record.price || record.basePrice,
        // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
      },
      create: {
        code: record.code,
        name: record.name,
        unit: record.normalizedUnit || record.unit,
        basePrice: record.normalizedPrice || record.price || record.basePrice,
        laborCost: record.laborCost || 0,
        materialCost: record.materialCost || 0,
        machineCost: record.machineCost || 0,
        source: record.source || 'unknown',
        chapter: record.chapter || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        category: record.category || 'general',
        validFrom: record.validFrom || new Date(),
        metadata: record.metadata || {},
      },
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ETL –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   */
  getETLStats(): ETLStats {
    const jobs = Array.from(this.jobs.values());
    const completed = jobs.filter(j => j.status === 'completed');
    const failed = jobs.filter(j => j.status === 'failed');

    const totalProcessingTime = completed.reduce((sum, job) => {
      if (job.endTime) {
        return sum + (job.endTime.getTime() - job.startTime.getTime());
      }
      return sum;
    }, 0);

    return {
      totalJobs: jobs.length,
      successfulJobs: completed.length,
      failedJobs: failed.length,
      totalRecordsProcessed: jobs.reduce((sum, job) => sum + job.recordsProcessed, 0),
      averageProcessingTime: completed.length > 0 ? totalProcessingTime / completed.length : 0,
      lastRunTime:
        jobs.length > 0 ? new Date(Math.max(...jobs.map(j => j.startTime.getTime()))) : new Date(),
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
   */
  getJob(jobId: string): ETLJob | undefined {
    return this.jobs.get(jobId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
   */
  getAllJobs(): ETLJob[] {
    return Array.from(this.jobs.values());
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private generateJobId(): string {
    return `etl-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }

  private normalizeCode(code: string): string {
    return code.replace(/\s+/g, '').toUpperCase();
  }

  private normalizePrice(price: any): number {
    if (typeof price === 'number') return price;
    if (typeof price === 'string') {
      const numPrice = parseFloat(price.replace(/[^\d.,]/g, '').replace(',', '.'));
      return isNaN(numPrice) ? 0 : numPrice;
    }
    return 0;
  }

  private normalizeUnit(unit: string): string {
    const unitMap: Record<string, string> = {
      –º3: '–º¬≥',
      –º2: '–º¬≤',
      '—á–µ–ª.-—á': '—á–µ–ª¬∑—á',
      '–º–∞—à.-—á': '–º–∞—à¬∑—á',
      —Ç: '—Ç',
      —à—Ç: '—à—Ç',
      –∫–≥: '–∫–≥',
    };

    return unitMap[unit.toLowerCase()] || unit;
  }

  private determineCategory(record: any): string {
    if (record.source === 'fsbts') {
      return record.source || 'fsbts';
    }

    if (record.type) {
      return record.type.toLowerCase();
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–¥—É
    if (record.code) {
      if (record.code.startsWith('–§–ï–†') || record.code.includes('FER')) {
        return 'fer';
      }
      if (record.code.startsWith('–¢–ï–†') || record.code.includes('TER')) {
        return 'ter';
      }
      if (record.code.startsWith('–ì–≠–°–ù') || record.code.includes('GESN')) {
        return 'gesn';
      }
    }

    return 'general';
  }

  private determineFileType(fileName: string): 'FER' | 'TER' | 'GESN' {
    const fileNameLower = fileName.toLowerCase();

    if (fileNameLower.includes('—Ñ–µ—Ä') || fileNameLower.includes('fer')) {
      return 'FER';
    }
    if (fileNameLower.includes('—Ç–µ—Ä') || fileNameLower.includes('ter')) {
      return 'TER';
    }
    if (fileNameLower.includes('–≥—ç—Å–Ω') || fileNameLower.includes('gesn')) {
      return 'GESN';
    }

    return 'FER'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  private chunkArray<T>(array: T[], size: number): T[][] {
    const chunks: T[][] = [];
    for (let i = 0; i < array.length; i += size) {
      chunks.push(array.slice(i, i + size));
    }
    return chunks;
  }
}
