/**
 * –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö
 */

import { Injectable, Logger, OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import * as path from 'path';
import { DownloadConfig, FileDownloadService } from './file-download.service';
import { FileParserService } from './file-parser.service';

export interface AutomationConfig {
  enabled: boolean;
  sources: {
    fer: string[];
    ter: string[];
    gesn: string[];
  };
  schedule: {
    downloadCron: string;
    parseCron: string;
    cleanupCron: string;
  };
}

export interface AutomationStats {
  lastDownload: Date | null;
  lastParse: Date | null;
  lastCleanup: Date | null;
  totalDownloads: number;
  totalParsed: number;
  totalErrors: number;
}

@Injectable()
export class AutomationService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(AutomationService.name);
  private isRunning = false;
  private config: AutomationConfig;
  private stats: AutomationStats = {
    lastDownload: null,
    lastParse: null,
    lastCleanup: null,
    totalDownloads: 0,
    totalParsed: 0,
    totalErrors: 0,
  };

  constructor(
    private fileDownloadService: FileDownloadService,
    private fileParserService: FileParserService,
  ) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
    this.config = this.loadConfig();
  }

  async onModuleInit() {
    if (this.config.enabled) {
      this.logger.log('ü§ñ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      this.logger.log(`üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${this.config.schedule.downloadCron}`);
      this.logger.log(`üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${this.config.schedule.parseCron}`);
      this.logger.log(`üßπ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏: ${this.config.schedule.cleanupCron}`);
    } else {
      this.logger.log('‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    }
  }

  async onModuleDestroy() {
    this.isRunning = false;
    this.logger.log('üî¥ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
   */
  @Cron('0 2 * * *') // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00
  async scheduledDownload() {
    if (!this.config.enabled || this.isRunning) {
      return;
    }

    try {
      this.isRunning = true;
      this.logger.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤');

      const downloadConfigs: DownloadConfig[] = [
        // –§–ï–† —Ñ–∞–π–ª—ã
        ...this.config.sources.fer.map((url, index) => ({
          url,
          fileName: `fer_${Date.now()}_${index}.${this.getFileExtension(url)}`,
        })),
        // –¢–ï–† —Ñ–∞–π–ª—ã
        ...this.config.sources.ter.map((url, index) => ({
          url,
          fileName: `ter_${Date.now()}_${index}.${this.getFileExtension(url)}`,
        })),
        // –ì–≠–°–ù —Ñ–∞–π–ª—ã
        ...this.config.sources.gesn.map((url, index) => ({
          url,
          fileName: `gesn_${Date.now()}_${index}.${this.getFileExtension(url)}`,
        })),
      ];

      const results = await this.fileDownloadService.downloadFiles(downloadConfigs);

      const successful = results.filter(r => r.success).length;
      const failed = results.filter(r => !r.success).length;

      this.stats.lastDownload = new Date();
      this.stats.totalDownloads += successful;
      this.stats.totalErrors += failed;

      this.logger.log(`‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${successful} —É—Å–ø–µ—à–Ω–æ, ${failed} –æ—à–∏–±–æ–∫`);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
      setTimeout(() => this.parseDownloadedFiles(), 10 * 60 * 1000);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:', error);
      this.stats.totalErrors++;
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  @Cron('0 3 * * *') // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00
  async scheduledParsing() {
    if (!this.config.enabled) {
      return;
    }

    await this.parseDownloadedFiles();
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  @Cron('0 4 * * 0') // –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 4:00
  async scheduledCleanup() {
    if (!this.config.enabled) {
      return;
    }

    try {
      this.logger.log('üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤');

      const deletedCount = await this.fileDownloadService.cleanupOldFiles(168); // 7 –¥–Ω–µ–π

      this.stats.lastCleanup = new Date();

      this.logger.log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${deletedCount} —Ñ–∞–π–ª–æ–≤`);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ:', error);
      this.stats.totalErrors++;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  private async parseDownloadedFiles() {
    try {
      this.logger.log('üìä –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');

      const downloadDir = this.fileDownloadService.getDownloadDir();
      const files = await this.fileDownloadService.getDownloadedFiles();

      if (files.length === 0) {
        this.logger.log('üìÇ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
        return;
      }

      const filePaths = files.map(file => path.join(downloadDir, file));
      const parseResults = await this.fileParserService.parseFiles(filePaths);

      let processedCount = 0;

      for (const result of parseResults) {
        if (result.success && result.data) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
          const fileType = this.detectFileType(result.fileName);

          if (fileType) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const structuredData = this.fileParserService.extractStructuredData(
              result.data.content,
              fileType,
            );

            if (structuredData.length > 0) {
              // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É —á–µ—Ä–µ–∑ CollectorService
              this.logger.log(
                `üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ ${structuredData.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${result.fileName}`,
              );
              processedCount++;
            }
          }
        }
      }

      this.stats.lastParse = new Date();
      this.stats.totalParsed += processedCount;

      const successful = parseResults.filter(r => r.success).length;
      const failed = parseResults.filter(r => !r.success).length;

      this.logger.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${successful} —É—Å–ø–µ—à–Ω–æ, ${failed} –æ—à–∏–±–æ–∫`);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–æ–≤:', error);
      this.stats.totalErrors++;
    }
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  async manualTrigger(): Promise<boolean> {
    if (this.isRunning) {
      this.logger.warn('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return false;
    }

    try {
      await this.scheduledDownload();
      return true;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats(): AutomationStats {
    return { ...this.stats };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  updateConfig(newConfig: Partial<AutomationConfig>): void {
    this.config = { ...this.config, ...newConfig };
    this.logger.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  private loadConfig(): AutomationConfig {
    return {
      enabled: process.env.AUTOMATION_ENABLED === 'true' || false,
      sources: {
        fer: (process.env.FER_SOURCES || '').split(',').filter(Boolean),
        ter: (process.env.TER_SOURCES || '').split(',').filter(Boolean),
        gesn: (process.env.GESN_SOURCES || '').split(',').filter(Boolean),
      },
      schedule: {
        downloadCron: process.env.DOWNLOAD_CRON || '0 2 * * *',
        parseCron: process.env.PARSE_CRON || '0 3 * * *',
        cleanupCron: process.env.CLEANUP_CRON || '0 4 * * 0',
      },
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ URL
   */
  private getFileExtension(url: string): string {
    const urlPath = new URL(url).pathname;
    const extension = path.extname(urlPath);
    return extension ? extension.substring(1) : 'unknown';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
   */
  private detectFileType(fileName: string): 'FER' | 'TER' | 'GESN' | null {
    const name = fileName.toLowerCase();

    if (name.includes('fer') || name.includes('—Ñ–µ—Ä')) {
      return 'FER';
    } else if (name.includes('ter') || name.includes('—Ç–µ—Ä')) {
      return 'TER';
    } else if (name.includes('gesn') || name.includes('–≥—ç—Å–Ω')) {
      return 'GESN';
    }

    return null;
  }
}
