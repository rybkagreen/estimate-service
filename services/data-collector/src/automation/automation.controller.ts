/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
 */

import { Body, Controller, Get, Logger, Post, Put } from '@nestjs/common';
import { AutomationConfig, AutomationService, AutomationStats } from '../services/automation.service';

@Controller('automation')
export class AutomationController {
  private readonly logger = new Logger(AutomationController.name);

  constructor(private automationService: AutomationService) {}

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  @Get('stats')
  async getStats(): Promise<AutomationStats> {
    this.logger.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
    return this.automationService.getStats();
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  @Post('trigger')
  async manualTrigger(): Promise<{ success: boolean; message: string }> {
    this.logger.log('üöÄ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');

    const success = await this.automationService.manualTrigger();

    return {
      success,
      message: success
        ? '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω'
        : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)'
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  @Put('config')
  async updateConfig(
    @Body() config: Partial<AutomationConfig>
  ): Promise<{ success: boolean; message: string }> {
    this.logger.log('‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');

    try {
      this.automationService.updateConfig(config);
      return {
        success: true,
        message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
      };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      return {
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é'
      };
    }
  }

  /**
   * –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  @Get('status')
  async getStatus(): Promise<{
    enabled: boolean;
    lastDownload: Date | null;
    lastParse: Date | null;
    lastCleanup: Date | null;
    totalOperations: number;
  }> {
    const stats = this.automationService.getStats();

    return {
      enabled: true, // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      lastDownload: stats.lastDownload,
      lastParse: stats.lastParse,
      lastCleanup: stats.lastCleanup,
      totalOperations: stats.totalDownloads + stats.totalParsed
    };
  }
}
