#!/usr/bin/env node

/**
 * Simple Local DeepSeek R1 MCP Server
 * –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é DeepSeek R1
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';
import { logger } from './utils/logger.js';
import { deepSeekService } from './services/deepseek.service.js';
import { config } from './config/index.js';

/**
 * –ü—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
 */
const LOCAL_TOOLS = [
  {
    name: 'local_deepseek_chat',
    description: '–û–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é DeepSeek R1',
    inputSchema: {
      type: 'object',
      properties: {
        message: { type: 'string', description: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏' },
        context: { type: 'string', description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç' },
      },
      required: ['message'],
    },
  },
  {
    name: 'local_deepseek_health_check',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏',
    inputSchema: {
      type: 'object',
      properties: {},
      additionalProperties: false,
    },
  },
];

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DeepSeek —Å–µ—Ä–≤–∏—Å–æ–º
 */
class DeepSeekManager {
  private initialized = false;

  private isShuttingDown = false;

  async initialize() {
    if (!this.initialized && !this.isShuttingDown) {
      try {
        logger.info('ü§ó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek —Å–µ—Ä–≤–∏—Å–∞...');
        logger.info(`üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.ai.deepseek.mockMode ? 'Mock Mode' : 'API Mode'}`);
        logger.info(`üîß –ú–æ–¥–µ–ª—å: ${config.ai.deepseek.model}`);
        logger.info(`üåê API URL: ${config.ai.deepseek.baseUrl}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
        const health = await deepSeekService.healthCheck();

        if (health.status === 'ok') {
          this.initialized = true;
          logger.info(`‚úÖ DeepSeek —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (latency: ${health.latency}ms)`);
        } else {
          throw new Error(`DeepSeek health check failed: ${health.message}`);
        }
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DeepSeek:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ mock —Ä–µ–∂–∏–º
        logger.warn('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ mock —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        this.initialized = true; // –ü–æ–∑–≤–æ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ mock —Ä–µ–∂–∏–º–µ
      }
    }
  }

  async generateResponse(message: string, context?: string): Promise<string> {
    if (!this.initialized) {
      await this.initialize();
    }

    if (this.isShuttingDown) {
      throw new Error('–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
    }

    try {
      const messages = [
        {
          role: 'system' as const,
          content: `–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Estimate Service.
          –ü–æ–º–æ–≥–∞–µ—à—å —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π, –∫–æ–¥–æ–º –∏ —Ä–µ—à–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.
          ${context ? `\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}` : ''}`,
        },
        {
          role: 'user' as const,
          content: message,
        },
      ];

      const response = await deepSeekService.chat(messages, {
        temperature: 0.3,
        maxTokens: 2000,
      });

      return response;
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
      throw error;
    }
  }

  async getStatus() {
    try {
      const health = await deepSeekService.healthCheck();

      return {
        status: health.status === 'ok' ? 'ready' : 'error',
        model: config.ai.deepseek.model,
        mode: config.ai.deepseek.mockMode ? 'mock' : 'api',
        initialized: this.initialized,
        apiUrl: config.ai.deepseek.baseUrl,
        latency: health.latency,
        message: health.message,
      };
    } catch (error) {
      return {
        status: 'error',
        model: config.ai.deepseek.model,
        mode: config.ai.deepseek.mockMode ? 'mock' : 'api',
        initialized: this.initialized,
        apiUrl: config.ai.deepseek.baseUrl,
        message: error instanceof Error ? error.message : 'Unknown error',
      };
    }
  }

  shutdown() {
    this.isShuttingDown = true;
    logger.info('üõë DeepSeek Manager: –Ω–∞—á–∞–ª–æ graceful shutdown');
  }
}

const deepSeekManager = new DeepSeekManager();

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
 */
async function main() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π DeepSeek R1...');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  try {
    await deepSeekManager.initialize();
  } catch (error) {
    logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DeepSeek:', error);
    logger.info('üëâ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ mock —Ä–µ–∂–∏–º–µ...');
  }

  const server = new Server(
    {
      name: 'estimate-service-local-simple',
      version: '1.0.0',
      description: 'Simple MCP server with local DeepSeek R1 emulation',
    },
  );

  // –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  server.setRequestHandler(ListToolsRequestSchema, async () => {
    logger.debug('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');

    return { tools: LOCAL_TOOLS };
  });

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const { name, arguments: args } = request.params;

    logger.info(`üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${name}`);

    try {
      switch (name) {
        case 'local_deepseek_chat': {
          const { message, context } = args as { message: string; context?: string };
          const response = await deepSeekManager.generateResponse(message, context);

          return {
            content: [
              {
                type: 'text',
                text: response,
              },
            ],
          };
        }

        case 'local_deepseek_health_check': {
          const status = await deepSeekManager.getStatus();

          return {
            content: [
              {
                type: 'text',
                text: `# üíö –°—Ç–∞—Ç—É—Å DeepSeek R1

**–°—Ç–∞—Ç—É—Å:** ${status.status}
**–ú–æ–¥–µ–ª—å:** ${status.model}
**–†–µ–∂–∏–º:** ${status.mode}
**API URL:** ${status.apiUrl}
**–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:** ${status.initialized ? '‚úÖ' : '‚ùå'}
${status.latency ? `**Latency:** ${status.latency}ms` : ''}

${status.message ? `**–°–æ–æ–±—â–µ–Ω–∏–µ:** ${status.message}` : ''}

${status.status === 'ready'
    ? '‚úÖ **–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ**'
    : '‚è≥ **–ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...**'
}`,
              },
            ],
          };
        }

        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`);
      }
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${name}:`, error);

      return {
        content: [
          {
            type: 'text',
            text: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
      };
    }
  });

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  const transport = new StdioServerTransport();

  logger.info('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DeepSeek R1');
  logger.info('ü§ó –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: local_deepseek_chat, local_deepseek_health_check');

  await server.connect(transport);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  logger.info('üõë SIGINT –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∞–ª–æ graceful shutdown...');
  deepSeekManager.shutdown();
  setTimeout(() => {
    logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞...');
    process.exit(0);
  }, 3000).unref();
});

process.on('SIGTERM', async () => {
  logger.info('üõë SIGTERM –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∞–ª–æ graceful shutdown...');
  deepSeekManager.shutdown();
  setTimeout(() => {
    logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞...');
    process.exit(0);
  }, 3000).unref();
});

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}
