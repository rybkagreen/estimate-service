/**
 * Hugging Face Novita API Service for DeepSeek R1
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é DeepSeek R1 —á–µ—Ä–µ–∑ Hugging Face Novita –ø—Ä–æ–≤–∞–π–¥–µ—Ä
 */

import axios, { AxiosInstance } from 'axios';
import { config } from '../config/index.js';
import { logger } from '../utils/logger.js';

export interface HuggingFaceMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface HuggingFaceGenerationOptions {
  temperature?: number;
  maxTokens?: number;
  topP?: number;
  stream?: boolean;
  repetitionPenalty?: number;
}

export interface HuggingFaceResponse {
  content: string;
  usage?: {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
  };
}

export interface ChatCompletionChunk {
  choices: Array<{
    delta: {
      content?: string;
    };
  }>;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek R1 —á–µ—Ä–µ–∑ Hugging Face Novita API
 */
export class HuggingFaceNovitaService {
  private client: AxiosInstance;
  private readonly modelName: string;
  private readonly apiKey: string;
  private readonly apiUrl: string;
  private isInitialized = false;

  constructor() {
    this.apiKey = config.ai.huggingface?.apiKey || process.env.HF_TOKEN || '';
    this.modelName = config.ai.huggingface?.modelName || 'deepseek/deepseek-r1-turbo';
    this.apiUrl = 'https://router.huggingface.co/novita/v3/openai/chat/completions';

    if (!this.apiKey) {
      throw new Error('HF_TOKEN environment variable is required for Hugging Face Novita API');
    }

    this.client = axios.create({
      baseURL: this.apiUrl,
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
      },
      timeout: parseInt(process.env.REQUEST_TIMEOUT || '60000'),
    });

    logger.info(`ü§ó HuggingFace Novita API Service initialized`);
    logger.debug('üîß HuggingFace Novita API config:', {
      modelName: this.modelName,
      apiUrl: this.apiUrl,
      hasApiKey: !!this.apiKey,
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize(): Promise<void> {
    try {
      logger.info('üöÄ Initializing HuggingFace Novita API Service...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      await this.testConnection();

      this.isInitialized = true;
      logger.info('‚úÖ HuggingFace Novita API Service initialized successfully');
    } catch (error) {
      logger.error('‚ùå Failed to initialize HuggingFace Novita API Service:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
   */
  private async testConnection(): Promise<void> {
    try {
      const response = await this.client.post('', {
        model: this.modelName,
        messages: [{ role: 'user', content: 'Hello' }],
        max_tokens: 10,
        temperature: 0.1,
        stream: false,
      });

      logger.info('üîó HuggingFace Novita API connection test successful');
    } catch (error: unknown) {
      logger.error('üîó HuggingFace Novita API connection test failed:', error);
      throw new Error(`Failed to connect to HuggingFace Novita API: ${(error as Error).message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek R1
   */
  async generateResponse(
    messages: HuggingFaceMessage[],
    options: HuggingFaceGenerationOptions = {}
  ): Promise<HuggingFaceResponse> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      const {
        temperature = 0.7,
        maxTokens = 1024,
        topP = 0.9,
        stream = false,
      } = options;

      logger.debug('ü§ñ Generating response with DeepSeek R1 via Novita:', {
        modelName: this.modelName,
        messagesCount: messages.length,
        options,
      });

      if (stream) {
        return await this.generateStreamingResponse(messages, options);
      }

      const response = await this.client.post('', {
        model: this.modelName,
        messages: messages.map(msg => ({
          role: msg.role,
          content: msg.content,
        })),
        max_tokens: maxTokens,
        temperature,
        top_p: topP,
        stream: false,
      });

      const content = response.data.choices?.[0]?.message?.content || '';
      const usage = response.data.usage ? {
        promptTokens: response.data.usage.prompt_tokens || 0,
        completionTokens: response.data.usage.completion_tokens || 0,
        totalTokens: response.data.usage.total_tokens || 0,
      } : undefined;

      logger.debug('‚úÖ Response generated successfully:', {
        contentLength: content.length,
        usage,
      });

      return {
        content,
        usage,
      };
    } catch (error) {
      logger.error('‚ùå Failed to generate response:', error);
      throw error;
    }
  }

  /**
   * –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
   */
  private async generateStreamingResponse(
    messages: HuggingFaceMessage[],
    options: HuggingFaceGenerationOptions
  ): Promise<HuggingFaceResponse> {
    const {
      temperature = 0.7,
      maxTokens = 1024,
      topP = 0.9,
    } = options;

    try {
      const response = await this.client.post('', {
        model: this.modelName,
        messages: messages.map(msg => ({
          role: msg.role,
          content: msg.content,
        })),
        max_tokens: maxTokens,
        temperature,
        top_p: topP,
        stream: true,
      }, {
        responseType: 'stream',
      });

      let content = '';
      let usage: any = undefined;

      return new Promise((resolve, reject) => {
        response.data.on('data', (chunk: Buffer) => {
          const lines = chunk.toString().split('\n');

          for (const line of lines) {
            if (!line.startsWith('data:')) continue;
            if (line.trim() === 'data: [DONE]') {
              resolve({ content, usage });
              return;
            }

            try {
              const data = JSON.parse(line.replace('data:', '').trim()) as ChatCompletionChunk;

              if (data.choices?.[0]?.delta?.content) {
                content += data.choices[0].delta.content;
              }

              if (data.usage) {
                usage = {
                  promptTokens: data.usage.prompt_tokens || 0,
                  completionTokens: data.usage.completion_tokens || 0,
                  totalTokens: data.usage.total_tokens || 0,
                };
              }
            } catch (parseError) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
            }
          }
        });

        response.data.on('error', (error: Error) => {
          reject(error);
        });

        response.data.on('end', () => {
          resolve({ content, usage });
        });
      });
    } catch (error) {
      logger.error('‚ùå Failed to generate streaming response:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é DeepSeek R1
   */
  async analyzeCode(code: string, language: string = 'typescript'): Promise<string> {
    const messages: HuggingFaceMessage[] = [
      {
        role: 'system',
        content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞ ${language} –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.`,
      },
      {
        role: 'user',
        content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥:\n\n\`\`\`${language}\n${code}\n\`\`\``,
      },
    ];

    const response = await this.generateResponse(messages, {
      temperature: 0.3,
      maxTokens: 2048,
    });

    return response.content;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
   */
  async generateTests(code: string, language: string = 'typescript'): Promise<string> {
    const messages: HuggingFaceMessage[] = [
      {
        role: 'system',
        content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –°–æ–∑–¥–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ unit-—Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ ${language}.`,
      },
      {
        role: 'user',
        content: `–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞:\n\n\`\`\`${language}\n${code}\n\`\`\``,
      },
    ];

    const response = await this.generateResponse(messages, {
      temperature: 0.2,
      maxTokens: 3072,
    });

    return response.content;
  }

  /**
   * –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞
   */
  async refactorCode(code: string, language: string = 'typescript', instructions?: string): Promise<string> {
    const systemPrompt = instructions
      ? `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º: ${instructions}`
      : `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è best practices.`;

    const messages: HuggingFaceMessage[] = [
      {
        role: 'system',
        content: systemPrompt,
      },
      {
        role: 'user',
        content: `–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —ç—Ç–æ—Ç –∫–æ–¥:\n\n\`\`\`${language}\n${code}\n\`\`\``,
      },
    ];

    const response = await this.generateResponse(messages, {
      temperature: 0.1,
      maxTokens: 4096,
    });

    return response.content;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  getHealthStatus() {
    return {
      service: 'HuggingFace Novita API Service',
      status: this.isInitialized ? 'healthy' : 'initializing',
      model: this.modelName,
      provider: 'novita',
      apiUrl: this.apiUrl,
      hasApiKey: !!this.apiKey,
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async cleanup(): Promise<void> {
    logger.info('üßπ Cleaning up HuggingFace Novita API Service...');
    this.isInitialized = false;
    logger.info('‚úÖ HuggingFace Novita API Service cleanup completed');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const huggingFaceNovitaService = new HuggingFaceNovitaService();
