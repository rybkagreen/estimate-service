/**
 * Local Hugging Face DeepSeek R1 Model Service
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é DeepSeek R1 —á–µ—Ä–µ–∑ Hugging Face Transformers
 */

import { AutoModelForCausalLM, AutoTokenizer, pipeline } from '@huggingface/transformers';
import { config } from '../config/index.js';
import { logger } from '../utils/logger.js';

export interface HuggingFaceMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface HuggingFaceGenerationOptions {
  temperature?: number;
  maxTokens?: number;
  topP?: number;
  topK?: number;
  repetitionPenalty?: number;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é DeepSeek R1
 */
export class HuggingFaceLocalService {
  private model: any = null;
  private tokenizer: any = null;
  private generator: any = null;
  private isInitialized = false;
  private readonly modelName: string;
  private readonly modelPath: string;
  private mockMode: boolean;

  constructor() {
    // –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å DeepSeek R1
    this.modelName = config.ai.huggingface?.modelName || 'deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B';
    this.modelPath = config.ai.huggingface?.modelPath || './models/deepseek-r1';
    this.mockMode = config.ai.huggingface?.mockMode || false;

    logger.info(`ü§ó HuggingFace Local Service initialized`);
    logger.debug('üîß HuggingFace config:', {
      modelName: this.modelName,
      modelPath: this.modelPath,
      mockMode: this.mockMode,
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
   */
  async initialize(): Promise<void> {
    if (this.isInitialized) {
      return;
    }

    try {
      logger.info('üöÄ Initializing local DeepSeek R1 model...');

      if (this.mockMode) {
        logger.info('üé≠ Running in mock mode - skipping model loading');
        this.isInitialized = true;
        return;
      }

      // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - —Å–∫–∞—á–∞–µ–º
      try {
        logger.info(`üìÇ Trying to load model from local path: ${this.modelPath}`);
        this.tokenizer = await AutoTokenizer.from_pretrained(this.modelPath);
        this.model = await AutoModelForCausalLM.from_pretrained(this.modelPath);
      } catch (localError) {
        logger.warn('‚ö†Ô∏è Local model not found, downloading from Hugging Face...');
        logger.info(`üì• Downloading model: ${this.modelName}`);

        // –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å —Å Hugging Face
        this.tokenizer = await AutoTokenizer.from_pretrained(this.modelName);
        this.model = await AutoModelForCausalLM.from_pretrained(this.modelName, {
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
          // torch_dtype: 'float16', // –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ JS –≤–µ—Ä—Å–∏–∏
          // device_map: 'auto',     // –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ JS –≤–µ—Ä—Å–∏–∏
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          cache_dir: this.modelPath,
        });

        logger.info(`üíæ Model saved to: ${this.modelPath}`);
      }

      // –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
      this.generator = await pipeline('text-generation', this.modelName);

      this.isInitialized = true;
      logger.info('‚úÖ DeepSeek R1 model initialized successfully');

    } catch (error) {
      logger.error('‚ùå Failed to initialize DeepSeek R1 model:', error);

      // Fallback to mock mode if initialization fails
      logger.warn('üé≠ Falling back to mock mode');
      this.mockMode = true;
      this.isInitialized = true;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
   */
  async generateResponse(
    messages: HuggingFaceMessage[],
    options: HuggingFaceGenerationOptions = {}
  ): Promise<string> {
    await this.initialize();

    try {
      logger.debug('üöÄ Generating response with DeepSeek R1:', {
        messagesCount: messages.length,
        temperature: options.temperature,
        mockMode: this.mockMode,
      });

      // –ú–æ–∫-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (this.mockMode) {
        return this.generateMockResponse(messages);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
      const prompt = this.formatMessagesAsPrompt(messages);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const result = await this.generator(prompt, {
        max_new_tokens: options.maxTokens || 512,
        temperature: options.temperature || 0.7,
        top_p: options.topP || 0.9,
        top_k: options.topK || 50,
        repetition_penalty: options.repetitionPenalty || 1.1,
        do_sample: true,
        return_full_text: false,
      });

      const generatedText = result[0]?.generated_text || '';

      logger.debug('‚úÖ Response generated successfully');
      return generatedText.trim();

    } catch (error) {
      logger.error('‚ùå Error generating response:', error);

      // Fallback to mock response
      logger.warn('üé≠ Falling back to mock response');
      return this.generateMockResponse(messages);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ–º–ø—Ç
   */
  private formatMessagesAsPrompt(messages: HuggingFaceMessage[]): string {
    let prompt = '';

    for (const message of messages) {
      switch (message.role) {
        case 'system':
          prompt += `System: ${message.content}\n\n`;
          break;
        case 'user':
          prompt += `Human: ${message.content}\n\n`;
          break;
        case 'assistant':
          prompt += `Assistant: ${message.content}\n\n`;
          break;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    prompt += 'Assistant: ';

    return prompt;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-–æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private generateMockResponse(messages: HuggingFaceMessage[]): string {
    const lastMessage = messages[messages.length - 1];
    const userMessage = lastMessage?.content || '';

    // –ë–∞–∑–æ–≤—ã–µ –º–æ–∫-–æ—Ç–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (userMessage.toLowerCase().includes('–∞–Ω–∞–ª–∏–∑') || userMessage.toLowerCase().includes('analyze')) {
      return `üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (Mock Response):

–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
- –ö–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –∏ —á–∏—Ç–∞–µ–º
- –°–æ–±–ª—é–¥–∞—é—Ç—Å—è –ø—Ä–∏–Ω—Ü–∏–ø—ã —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é TypeScript
- –°—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ unit-—Ç–µ—Å—Ç–æ–≤

–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
1. –î–æ–±–∞–≤–∏—Ç—å JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å error handling
3. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å`;
    }

    if (userMessage.toLowerCase().includes('–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏') || userMessage.toLowerCase().includes('docs')) {
      return `üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (Mock Response):

## –û–ø–∏—Å–∞–Ω–∏–µ
–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
- \`param1\` - –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
- \`param2\` - –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

## –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
\`\`\`typescript
const result = functionName(param1, param2);
\`\`\``;
    }

    if (userMessage.toLowerCase().includes('—Ç–µ—Å—Ç') || userMessage.toLowerCase().includes('test')) {
      return `üß™ Unit-—Ç–µ—Å—Ç—ã (Mock Response):

\`\`\`typescript
describe('Component Tests', () => {
  test('should handle basic functionality', () => {
    // Arrange
    const input = { test: 'data' };

    // Act
    const result = component.process(input);

    // Assert
    expect(result).toBeDefined();
    expect(result.success).toBe(true);
  });

  test('should handle edge cases', () => {
    // Arrange
    const edgeCase = null;

    // Act & Assert
    expect(() => component.process(edgeCase))
      .toThrow('Invalid input');
  });
});
\`\`\``;
    }

    // –û–±—â–∏–π –º–æ–∫-–æ—Ç–≤–µ—Ç
    return `ü§ñ DeepSeek R1 Response (Mock Mode):

–ü—Ä–∏–≤–µ—Ç! –Ø DeepSeek R1 –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏. –í–∞—à –∑–∞–ø—Ä–æ—Å: "${userMessage}"

–í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —è –±—ã:
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–¥–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
- –°–æ–∑–¥–∞–ª comprehensive —Ç–µ—Å—Ç—ã

–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å DeepSeek R1.`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
   */
  async healthCheck(): Promise<{ status: string; model: string; initialized: boolean; mockMode: boolean }> {
    return {
      status: this.isInitialized ? 'healthy' : 'not_initialized',
      model: this.modelName,
      initialized: this.isInitialized,
      mockMode: this.mockMode,
    };
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async dispose(): Promise<void> {
    if (this.model) {
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å, –∑–∞–Ω—è—Ç—É—é –º–æ–¥–µ–ª—å—é
      this.model = null;
    }
    if (this.tokenizer) {
      this.tokenizer = null;
    }
    if (this.generator) {
      this.generator = null;
    }
    this.isInitialized = false;
    logger.info('üßπ HuggingFace Local Service disposed');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const huggingFaceLocalService = new HuggingFaceLocalService();
