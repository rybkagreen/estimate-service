/**
 * DeepSeek R1 AI Service for MCP Server
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek R1 –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
 */

import axios, { AxiosInstance } from 'axios';
import { config } from '../config/index.js';
import { logger } from '../utils/logger.js';

export interface DeepSeekMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface DeepSeekRequest {
  model: string;
  messages: DeepSeekMessage[];
  temperature?: number;
  max_tokens?: number;
  stream?: boolean;
}

export interface DeepSeekResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: Array<{
    index: number;
    message: {
      role: string;
      content: string;
    };
    finish_reason: string;
  }>;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek R1 API
 */
export class DeepSeekService {
  private client: AxiosInstance;
  private readonly apiKey: string;
  private readonly model: string;
  private readonly baseUrl: string;

  constructor() {
    this.apiKey = config.ai.deepseek.apiKey;
    this.model = config.ai.deepseek.model;
    this.baseUrl = config.ai.deepseek.baseUrl;

    if (!this.apiKey) {
      throw new Error('DeepSeek API key is required');
    }

    this.client = axios.create({
      baseURL: this.baseUrl,
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
      },
      timeout: config.ai.deepseek.timeout || 30000,
    });

    logger.info('ü§ñ DeepSeek R1 service initialized');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek R1
   */
  async chat(messages: DeepSeekMessage[], options: {
    temperature?: number;
    maxTokens?: number;
  } = {}): Promise<string> {
    try {
      const request: DeepSeekRequest = {
        model: this.model,
        messages,
        temperature: options.temperature ?? config.ai.deepseek.temperature,
        max_tokens: options.maxTokens ?? config.ai.deepseek.maxTokens,
      };

      logger.debug('üöÄ Sending request to DeepSeek R1:', {
        model: request.model,
        messagesCount: messages.length,
        temperature: request.temperature,
      });

      const response = await this.client.post<DeepSeekResponse>('/chat/completions', request);

      if (!response.data.choices || response.data.choices.length === 0) {
        throw new Error('No response from DeepSeek R1');
      }

      const content = response.data.choices[0].message.content;

      logger.debug('‚úÖ DeepSeek R1 response received:', {
        tokensUsed: response.data.usage?.total_tokens || 0,
        responseLength: content.length,
      });

      return content;
    } catch (error) {
      logger.error('‚ùå DeepSeek R1 API error:', error);

      if (axios.isAxiosError(error)) {
        if (error.response?.status === 401) {
          throw new Error('Invalid DeepSeek API key');
        }
        if (error.response?.status === 429) {
          throw new Error('DeepSeek API rate limit exceeded');
        }
        if (error.response?.status === 500) {
          throw new Error('DeepSeek API server error');
        }
      }

      throw new Error(`DeepSeek API error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é DeepSeek R1
   */
  async analyzeCode(code: string, context: string = ''): Promise<string> {
    const messages: DeepSeekMessage[] = [
      {
        role: 'system',
        content: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ TypeScript/React/NestJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ –¥–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
- –ö–∞—á–µ—Å—Ç–≤—É –∫–æ–¥–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –æ—à–∏–±–∫–∞–º –∏ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é best practices
- –í–æ–∑–º–æ–∂–Ω—ã–º —É–ª—É—á—à–µ–Ω–∏—è–º

–û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–∏–º–µ—Ä—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.`
      },
      {
        role: 'user',
        content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥:

${context ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}\n\n` : ''}

\`\`\`typescript
${code}
\`\`\``
      }
    ];

    return await this.chat(messages, { temperature: 0.2 });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é DeepSeek R1
   */
  async generateDocumentation(code: string, type: 'function' | 'class' | 'component' | 'api' = 'function'): Promise<string> {
    const messages: DeepSeekMessage[] = [
      {
        role: 'system',
        content: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–æ–¥–∞. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSDoc/TSDoc.

–î–ª—è ${type} –≥–µ–Ω–µ—Ä–∏—Ä—É–π:
- –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ç–∏–ø–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
- –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
- –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–∞ TypeScript.`
      },
      {
        role: 'user',
        content: `–°–æ–∑–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ ${type}:

\`\`\`typescript
${code}
\`\`\``
      }
    ];

    return await this.chat(messages, { temperature: 0.3 });
  }

  /**
   * –ü–æ–º–æ—â—å –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤
   */
  async generateTests(code: string, framework: 'jest' | 'vitest' | 'playwright' = 'jest'): Promise<string> {
    const messages: DeepSeekMessage[] = [
      {
        role: 'system',
        content: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é JavaScript/TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
–ü–∏—à–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è ${framework}.

–°–æ–∑–¥–∞–≤–∞–π —Ç–µ—Å—Ç—ã:
- Unit —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤
- Component —Ç–µ—Å—Ç—ã –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Å React Testing Library)
- Integration —Ç–µ—Å—Ç—ã –¥–ª—è API endpoints
- E2E —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (Playwright)

–ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: mocking, fixtures, test utilities, describe/it —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
–ü–æ–∫—Ä—ã–≤–∞–π happy path, edge cases –∏ error handling.`
      },
      {
        role: 'user',
        content: `–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è ${framework}:

\`\`\`typescript
${code}
\`\`\``
      }
    ];

    return await this.chat(messages, { temperature: 0.4 });
  }

  /**
   * –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞
   */
  async refactorCode(code: string, goals: string[]): Promise<string> {
    const goalsText = goals.length > 0 ? goals.join(', ') : '—É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞';

    const messages: DeepSeekMessage[] = [
      {
        role: 'system',
        content: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–¥–∞. –£–ª—É—á—à–∞–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.

–ü—Ä–∏–º–µ–Ω—è–π –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã
- Clean Code
- DRY (Don't Repeat Yourself)
- KISS (Keep It Simple, Stupid)
- –¢–∏–ø–∏–∑–∞—Ü–∏—è TypeScript
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã React/NestJS

–í—Å–µ–≥–¥–∞ –æ–±—ä—è—Å–Ω—è–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.`
      },
      {
        role: 'user',
        content: `–û—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —ç—Ç–æ—Ç –∫–æ–¥ —Å —Ü–µ–ª—å—é: ${goalsText}

\`\`\`typescript
${code}
\`\`\``
      }
    ];

    return await this.chat(messages, { temperature: 0.3 });
  }

  /**
   * –ü–æ–º–æ—â—å –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
   */
  async architectureAdvice(description: string, constraints: string[] = []): Promise<string> {
    const constraintsText = constraints.length > 0
      ? `\n\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${constraints.join(', ')}`
      : '';

    const messages: DeepSeekMessage[] = [
      {
        role: 'system',
        content: `–¢—ã - –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤:
- Full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (React + NestJS)
- –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
- Database design (PostgreSQL, Prisma)
- Cloud-native —Ä–µ—à–µ–Ω–∏—è—Ö
- Performance optimization
- Security best practices

–ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, —Ä–µ–∞–ª–∏–∑—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞.`
      },
      {
        role: 'user',
        content: `–ù—É–∂–µ–Ω —Å–æ–≤–µ—Ç –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ:

${description}${constraintsText}

–ü—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.`
      }
    ];

    return await this.chat(messages, { temperature: 0.4 });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ DeepSeek API
   */
  async healthCheck(): Promise<{ status: 'ok' | 'error'; message: string; latency?: number }> {
    const startTime = Date.now();

    try {
      const messages: DeepSeekMessage[] = [
        {
          role: 'user',
          content: 'Hello! Please respond with "API is working" to confirm connectivity.'
        }
      ];

      const response = await this.chat(messages, {
        temperature: 0,
        maxTokens: 50
      });

      const latency = Date.now() - startTime;

      return {
        status: 'ok',
        message: `DeepSeek R1 API is operational. Response: ${response.slice(0, 100)}`,
        latency
      };
    } catch (error) {
      return {
        status: 'error',
        message: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
}

export const deepSeekService = new DeepSeekService();
