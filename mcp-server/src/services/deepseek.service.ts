/**
 * DeepSeek R1 AI Service for MCP Server
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek R1 —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã
 */

import { config } from '../config/index.js';
import { logger } from '../utils/logger.js';
import {
  startModelCall,
  endModelCall,
  recordModelError,
  recordTokenUsage,
  updateModelAvailability
} from '../utils/prometheus-metrics.js';

export interface DeepSeekMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface DeepSeekResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: Array<{
    index: number;
    message: {
      role: string;
      content: string;
    };
    finish_reason: string;
  }>;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek R1 API —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã
 */
export class DeepSeekService {
  private readonly apiKey: string;
  private readonly model: string;
  private readonly baseUrl: string;
  private readonly mockMode: boolean;

  constructor() {
    this.apiKey = config.ai.deepseek.apiKey;
    this.model = config.ai.deepseek.model;
    this.baseUrl = config.ai.deepseek.baseUrl;
    this.mockMode = config.ai.deepseek.mockMode;

    if (!this.mockMode && !this.apiKey) {
      throw new Error('DeepSeek API key is required when not in mock mode');
    }

    logger.info(`ü§ñ DeepSeek R1 service initialized ${this.mockMode ? '(Mock Mode)' : 'with HTTP API'}`);
    logger.debug('üîß DeepSeek config:', {
      model: this.model,
      baseUrl: this.baseUrl,
      mockMode: this.mockMode,
      configModel: config.ai.deepseek.model,
      envModel: process.env.DEEPSEEK_MODEL
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek R1 —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –º–æ–∫-–æ—Ç–≤–µ—Ç
   */
  async chat(messages: DeepSeekMessage[], options: {
    temperature?: number;
    maxTokens?: number;
  } = {}): Promise<string> {
    // Start metrics tracking
    const metricsCall = startModelCall('deepseek-r1', 'deepseek', 'chat');
    
    try {
      logger.debug('üöÄ Sending request to DeepSeek R1:', {
        model: this.model,
        messagesCount: messages.length,
        temperature: options.temperature ?? config.ai.deepseek.temperature,
        mockMode: this.mockMode,
      });

      // –ú–æ–∫-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (this.mockMode) {
        const response = this.generateMockResponse(messages);
        endModelCall(metricsCall, true, false);
        return response;
      }

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API
      const requestBody = {
        model: this.model,
        messages: messages,
        temperature: options.temperature ?? config.ai.deepseek.temperature,
        max_tokens: options.maxTokens ?? config.ai.deepseek.maxTokens,
        stream: false,
      };

      // –û—Ç–ø—Ä–∞–≤–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorData = await response.text();
        logger.error('‚ùå DeepSeek API HTTP error:', {
          status: response.status,
          statusText: response.statusText,
          body: errorData,
        });

        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ DeepSeek
        let errorType = 'unknown_error';
        
        if (response.status === 401) {
          errorType = 'auth_error';
          recordModelError('deepseek-r1', 'deepseek', 'chat', errorType);
          endModelCall(metricsCall, false, false);
          updateModelAvailability('deepseek-r1', 'deepseek', false);
          throw new Error('Invalid DeepSeek API key (401 Unauthorized)');
        }
        if (response.status === 429) {
          errorType = 'rate_limit';
          recordModelError('deepseek-r1', 'deepseek', 'chat', errorType);
          endModelCall(metricsCall, false, false);
          throw new Error('DeepSeek API rate limit exceeded (429)');
        }
        if (response.status === 402) {
          errorType = 'payment_required';
          recordModelError('deepseek-r1', 'deepseek', 'chat', errorType);
          endModelCall(metricsCall, false, false);
          updateModelAvailability('deepseek-r1', 'deepseek', false);
          throw new Error('Insufficient balance on DeepSeek account (402)');
        }
        if (response.status >= 500) {
          errorType = 'server_error';
          recordModelError('deepseek-r1', 'deepseek', 'chat', errorType);
          endModelCall(metricsCall, false, false);
          updateModelAvailability('deepseek-r1', 'deepseek', false);
          throw new Error(`DeepSeek API server error (${response.status})`);
        }

        recordModelError('deepseek-r1', 'deepseek', 'chat', errorType);
        endModelCall(metricsCall, false, false);
        throw new Error(`DeepSeek API error: ${response.status} ${response.statusText}`);
      }

      const data: DeepSeekResponse = await response.json();

      if (!data.choices || data.choices.length === 0) {
        recordModelError('deepseek-r1', 'deepseek', 'chat', 'empty_response');
        endModelCall(metricsCall, false, false);
        throw new Error('No response from DeepSeek R1');
      }

      const content = data.choices[0].message.content;

      if (!content) {
        recordModelError('deepseek-r1', 'deepseek', 'chat', 'empty_content');
        endModelCall(metricsCall, false, false);
        throw new Error('Empty response from DeepSeek R1');
      }

      // Record token usage
      if (data.usage) {
        recordTokenUsage(
          'deepseek-r1',
          'deepseek',
          data.usage.prompt_tokens || 0,
          data.usage.completion_tokens || 0
        );
      }

      logger.debug('‚úÖ DeepSeek R1 response received:', {
        tokensUsed: data.usage?.total_tokens || 0,
        responseLength: content.length,
      });

      // Mark successful completion
      endModelCall(metricsCall, true, false);
      updateModelAvailability('deepseek-r1', 'deepseek', true);

      return content;
    } catch (error) {
      logger.error('‚ùå DeepSeek R1 API error:', error);

      // –ü–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
      if (error instanceof Error && error.message.includes('DeepSeek')) {
        throw error;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      if (error instanceof TypeError && error.message.includes('fetch')) {
        recordModelError('deepseek-r1', 'deepseek', 'chat', 'network_error');
        endModelCall(metricsCall, false, false);
        updateModelAvailability('deepseek-r1', 'deepseek', false);
        throw new Error('Network error: Unable to connect to DeepSeek API');
      }

      // Record generic error
      recordModelError('deepseek-r1', 'deepseek', 'chat', 'unknown_error');
      endModelCall(metricsCall, false, false);
      
      throw new Error(`DeepSeek API error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é DeepSeek R1
   */
  async analyzeCode(code: string, context: string = ''): Promise<string> {
    const metricsCall = startModelCall('deepseek-r1', 'deepseek', 'analyze_code');
    
    try {
      const messages: DeepSeekMessage[] = [
        {
          role: 'system',
          content: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ TypeScript/React/NestJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ –¥–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
- –ö–∞—á–µ—Å—Ç–≤—É –∫–æ–¥–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –æ—à–∏–±–∫–∞–º –∏ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é best practices
- –í–æ–∑–º–æ–∂–Ω—ã–º —É–ª—É—á—à–µ–Ω–∏—è–º

–û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–∏–º–µ—Ä—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.`
        },
        {
          role: 'user',
          content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥:

${context ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}\n\n` : ''}

\`\`\`typescript
${code}
\`\`\``
        }
      ];

      const result = await this.chat(messages, { temperature: 0.2 });
      endModelCall(metricsCall, true, false);
      return result;
    } catch (error) {
      endModelCall(metricsCall, false, false);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é DeepSeek R1
   */
  async generateDocumentation(code: string, type: 'function' | 'class' | 'component' | 'api' = 'function'): Promise<string> {
    const messages: DeepSeekMessage[] = [
      {
        role: 'system',
        content: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–æ–¥–∞. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSDoc/TSDoc.

–î–ª—è ${type} –≥–µ–Ω–µ—Ä–∏—Ä—É–π:
- –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ç–∏–ø–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
- –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
- –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–∞ TypeScript.`
      },
      {
        role: 'user',
        content: `–°–æ–∑–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ ${type}:

\`\`\`typescript
${code}
\`\`\``
      }
    ];

    return await this.chat(messages, { temperature: 0.3 });
  }

  /**
   * –ü–æ–º–æ—â—å –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤
   */
  async generateTests(code: string, framework: 'jest' | 'vitest' | 'playwright' = 'jest'): Promise<string> {
    const messages: DeepSeekMessage[] = [
      {
        role: 'system',
        content: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é JavaScript/TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
–ü–∏—à–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è ${framework}.

–°–æ–∑–¥–∞–≤–∞–π —Ç–µ—Å—Ç—ã:
- Unit —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤
- Component —Ç–µ—Å—Ç—ã –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Å React Testing Library)
- Integration —Ç–µ—Å—Ç—ã –¥–ª—è API endpoints
- E2E —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (Playwright)

–ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: mocking, fixtures, test utilities, describe/it —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
–ü–æ–∫—Ä—ã–≤–∞–π happy path, edge cases –∏ error handling.`
      },
      {
        role: 'user',
        content: `–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è ${framework}:

\`\`\`typescript
${code}
\`\`\``
      }
    ];

    return await this.chat(messages, { temperature: 0.4 });
  }

  /**
   * –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞
   */
  async refactorCode(code: string, goals: string[]): Promise<string> {
    const goalsText = goals.length > 0 ? goals.join(', ') : '—É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞';

    const messages: DeepSeekMessage[] = [
      {
        role: 'system',
        content: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–¥–∞. –£–ª—É—á—à–∞–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.

–ü—Ä–∏–º–µ–Ω—è–π –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã
- Clean Code
- DRY (Don't Repeat Yourself)
- KISS (Keep It Simple, Stupid)
- –¢–∏–ø–∏–∑–∞—Ü–∏—è TypeScript
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã React/NestJS

–í—Å–µ–≥–¥–∞ –æ–±—ä—è—Å–Ω—è–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.`
      },
      {
        role: 'user',
        content: `–û—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —ç—Ç–æ—Ç –∫–æ–¥ —Å —Ü–µ–ª—å—é: ${goalsText}

\`\`\`typescript
${code}
\`\`\``
      }
    ];

    return await this.chat(messages, { temperature: 0.3 });
  }

  /**
   * –ü–æ–º–æ—â—å –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
   */
  async architectureAdvice(description: string, constraints: string[] = []): Promise<string> {
    const constraintsText = constraints.length > 0
      ? `\n\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${constraints.join(', ')}`
      : '';

    const messages: DeepSeekMessage[] = [
      {
        role: 'system',
        content: `–¢—ã - –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤:
- Full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (React + NestJS)
- –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
- Database design (PostgreSQL, Prisma)
- Cloud-native —Ä–µ—à–µ–Ω–∏—è—Ö
- Performance optimization
- Security best practices

–ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, —Ä–µ–∞–ª–∏–∑—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞.`
      },
      {
        role: 'user',
        content: `–ù—É–∂–µ–Ω —Å–æ–≤–µ—Ç –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ:

${description}${constraintsText}

–ü—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.`
      }
    ];

    return await this.chat(messages, { temperature: 0.4 });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ DeepSeek API
   */
  async healthCheck(): Promise<{ status: 'ok' | 'error'; message: string; latency?: number }> {
    const startTime = Date.now();

    try {
      const messages: DeepSeekMessage[] = [
        {
          role: 'user',
          content: 'Hello! Please respond with "API is working" to confirm connectivity.'
        }
      ];

      const response = await this.chat(messages, {
        temperature: 0,
        maxTokens: 50
      });

      const latency = Date.now() - startTime;

      return {
        status: 'ok',
        message: `DeepSeek R1 API is operational. Response: ${response.slice(0, 100)}`,
        latency
      };
    } catch (error) {
      return {
        status: 'error',
        message: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-–æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private generateMockResponse(messages: DeepSeekMessage[]): string {
    const lastMessage = messages[messages.length - 1];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–∫-–æ—Ç–≤–µ—Ç
    const userContent = lastMessage.content.toLowerCase();

    if (userContent.includes('–∞–Ω–∞–ª–∏–∑') || userContent.includes('analyze')) {
      return `# üîç –ú–æ–∫-–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –≤ –º–æ–∫-—Ä–µ–∂–∏–º–µ.

## –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
- ‚úÖ –•–æ—Ä–æ—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞
- ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ TypeScript best practices
- ‚ö†Ô∏è –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å error handling

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é
3. –î–æ–±–∞–≤–∏—Ç—å unit-—Ç–µ—Å—Ç—ã

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ –º–æ–∫-–æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏. –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π API.*`;
    }

    if (userContent.includes('–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü') || userContent.includes('documentation')) {
      return `# üìö –ú–æ–∫-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

\`\`\`typescript
/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 * @param input - –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * @example
 * const result = demoFunction('test');
 */
function demoFunction(input: string): string {
  return \`Processed: \${input}\`;
}
\`\`\`

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ –º–æ–∫-–æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.*`;
    }

    if (userContent.includes('—Ç–µ—Å—Ç') || userContent.includes('test')) {
      return `# üß™ –ú–æ–∫-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤

\`\`\`typescript
import { describe, it, expect } from '@jest/globals';

describe('Demo Test Suite', () => {
  it('should work correctly', () => {
    const result = demoFunction('test');
    expect(result).toBe('Processed: test');
  });
});
\`\`\`

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ –º–æ–∫-–æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.*`;
    }

    if (userContent.includes('api is working') || userContent.includes('health')) {
      return 'API is working correctly in mock mode';
    }

    // –û–±—â–∏–π –º–æ–∫-–æ—Ç–≤–µ—Ç
    return `# ü§ñ DeepSeek R1 –ú–æ–∫-—Ä–µ–∂–∏–º

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek R1 –≤ –º–æ–∫-—Ä–µ–∂–∏–º–µ.

–í–∞—à –∑–∞–ø—Ä–æ—Å: "${lastMessage.content.slice(0, 100)}..."

–í production —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek R1 AI.

**–í—Ä–µ–º—è:** ${new Date().toISOString()}
**–ú–æ–¥–µ–ª—å:** ${this.model} (–º–æ–∫)
**–°–æ–æ–±—â–µ–Ω–∏–π:** ${messages.length}`;
  }
}

export const deepSeekService = new DeepSeekService();
