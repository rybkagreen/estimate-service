/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { logger } from '../utils/logger.js';
import { DatabaseService } from './database.js';
import { AIService } from './ai.js';
import { ExternalService } from './external.js';
import { ProjectService } from './project.js';
import { ModelManagerService, modelManager } from './model-manager.service.js';

export interface Services {
  database: DatabaseService;
  ai: AIService;
  external: ExternalService;
  project: ProjectService;
  modelManager: ModelManagerService;
}

let services: Services | null = null;

export async function setupServices(server: Server, config: any): Promise<Services> {
  logger.info('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞...');

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const database = new DatabaseService(config.database);
    await database.initialize();
    logger.info('‚úÖ –°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞
    const ai = new AIService(config.ai);
    await ai.initialize();
    logger.info('‚úÖ AI —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    const external = new ExternalService(config.external);
    await external.initialize();
    logger.info('‚úÖ –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    const project = new ProjectService(config.project);
    await project.initialize();
    logger.info('‚úÖ –ü—Ä–æ–µ–∫—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Model Manager
    await modelManager.initializeClaude(config.ai?.claude?.apiKey);
    logger.info('‚úÖ Model Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    services = {
      database,
      ai,
      external,
      project,
      modelManager,
    };

    logger.info('üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    return services;

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
    throw error;
  }
}

export function getServices(): Services {
  if (!services) {
    throw new Error('–°–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ setupServices() —Å–Ω–∞—á–∞–ª–∞.');
  }
  return services;
}

export async function shutdownServices(): Promise<void> {
  if (!services) {
    return;
  }

  logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤...');

  try {
    await services.database.shutdown();
    await services.ai.shutdown();
    await services.external.shutdown();
    await services.project.shutdown();

    services = null;
    logger.info('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É');
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
    throw error;
  }
}
