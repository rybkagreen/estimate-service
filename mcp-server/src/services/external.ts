/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ API (–ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞ –∏ –¥—Ä.)
 */

import axios, { AxiosInstance } from 'axios';
import { logger } from '../utils/logger.js';

export interface ExternalConfig {
  grandSmeta: {
    apiUrl: string;
    apiKey?: string;
  };
}

export interface GrandSmetaItem {
  id: string;
  name: string;
  code?: string;
  unit: string;
  unitPrice: number;
  category: string;
  description?: string;
}

export class ExternalService {
  private config: ExternalConfig;
  private grandSmetaClient: AxiosInstance;
  private isInitialized = false;

  constructor(config: ExternalConfig) {
    this.config = config;

    this.grandSmetaClient = axios.create({
      baseURL: config.grandSmeta.apiUrl,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json',
        ...(config.grandSmeta.apiKey && {
          'Authorization': `Bearer ${config.grandSmeta.apiKey}`,
        }),
      },
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async initialize(): Promise<void> {
    try {
      logger.info('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞ API (–µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å)
      if (this.config.grandSmeta.apiKey) {
        await this.validateGrandSmetaConnection();
      }

      this.isInitialized = true;
      logger.info('‚úÖ –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:', error);

      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
      if (process.env.NODE_ENV === 'development') {
        logger.warn('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API (dev —Ä–µ–∂–∏–º)');
        this.isInitialized = true;
      } else {
        throw error;
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞ API
   */
  private async validateGrandSmetaConnection(): Promise<void> {
    try {
      const response = await this.grandSmetaClient.get('/health');
      if (response.status !== 200) {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      }
      logger.debug('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞ API –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ');
    } catch (error) {
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
      logger.warn('‚ö†Ô∏è –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error instanceof Error ? error.message : 'Unknown error');
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π –≤ –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞
   */
  async searchGrandSmetaItems(query: string, category?: string): Promise<GrandSmetaItem[]> {
    if (!this.isInitialized) {
      throw new Error('–í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    try {
      logger.debug('üîç –ü–æ–∏—Å–∫ –≤ –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞:', { query, category });

      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      if (!this.config.grandSmeta.apiKey || process.env.NODE_ENV === 'development') {
        return this.getMockGrandSmetaItems(query, category);
      }

      const params: any = { q: query };
      if (category) {
        params.category = category;
      }

      const response = await this.grandSmetaClient.get('/search', { params });

      return response.data.items || [];

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞:', error);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return this.getMockGrandSmetaItems(query, category);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞
   */
  private getMockGrandSmetaItems(query: string, category?: string): GrandSmetaItem[] {
    const mockItems: GrandSmetaItem[] = [
      {
        id: 'mock-1',
        name: `–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ${query} –≤—Ä—É—á–Ω—É—é`,
        code: '–§–ï–†01-01-001-01',
        unit: '–º3',
        unitPrice: 850.50,
        category: category || 'earthworks',
        description: `–ú–æ–∫ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞: ${query}`,
      },
      {
        id: 'mock-2',
        name: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${query} –º–µ—Ö–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º`,
        code: '–§–ï–†01-01-001-02',
        unit: '–º3',
        unitPrice: 1200.75,
        category: category || 'earthworks',
        description: `–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–∫ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è: ${query}`,
      },
      {
        id: 'mock-3',
        name: `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ${query}`,
        code: '–§–ï–†01-01-001-03',
        unit: '–º3',
        unitPrice: 450.25,
        category: 'transport',
        description: `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è: ${query}`,
      },
    ];

    return mockItems.filter(item =>
      item.name.toLowerCase().includes(query.toLowerCase()) ||
      item.description?.toLowerCase().includes(query.toLowerCase())
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
   */
  async getGrandSmetaItemDetails(itemId: string): Promise<GrandSmetaItem | null> {
    if (!this.isInitialized) {
      throw new Error('–í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    try {
      logger.debug('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏ –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞:', { itemId });

      // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (!this.config.grandSmeta.apiKey || process.env.NODE_ENV === 'development') {
        return {
          id: itemId,
          name: '–î–µ—Ç–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞',
          code: '–§–ï–†01-01-001-DETAIL',
          unit: '—à—Ç',
          unitPrice: 2500.00,
          category: 'detailed',
          description: `–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ${itemId} —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏`,
        };
      }

      const response = await this.grandSmetaClient.get(`/items/${itemId}`);
      return response.data;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ü–µ–Ω–æ–∫
   */
  async getCurrentPrices(region: string = 'moscow'): Promise<any> {
    if (!this.isInitialized) {
      throw new Error('–í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    try {
      logger.debug('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ü–µ–Ω–æ–∫:', { region });

      // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ
      if (!this.config.grandSmeta.apiKey || process.env.NODE_ENV === 'development') {
        return {
          region,
          updateDate: new Date().toISOString(),
          indexFactor: 1.25,
          categories: {
            earthworks: 1.20,
            concrete: 1.35,
            reinforcement: 1.40,
            finishing: 1.15,
          },
        };
      }

      const response = await this.grandSmetaClient.get(`/prices/${region}`);
      return response.data;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ü–µ–Ω–æ–∫:', error);
      throw error;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–º–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  async validateEstimateItem(item: any): Promise<{
    isValid: boolean;
    issues: string[];
    suggestions: string[];
  }> {
    try {
      logger.debug('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–º–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏:', { itemName: item.name });

      const issues: string[] = [];
      const suggestions: string[] = [];

      // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (!item.name || item.name.trim().length < 3) {
        issues.push('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ');
      }

      if (!item.unit) {
        issues.push('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è');
      }

      if (!item.unitPrice || item.unitPrice <= 0) {
        issues.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É');
        suggestions.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Ü–µ–Ω–æ–∫');
      }

      if (!item.quantity || item.quantity <= 0) {
        issues.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º
      if (item.unitPrice > 10000) {
        suggestions.push('–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
      }

      return {
        isValid: issues.length === 0,
        issues,
        suggestions,
      };

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:', error);
      return {
        isValid: false,
        issues: ['–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'],
        suggestions: [],
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async healthCheck(): Promise<{
    status: 'healthy' | 'partial' | 'unhealthy';
    services: {
      grandSmeta: 'online' | 'offline' | 'unknown';
    };
  }> {
    const services = {
      grandSmeta: 'unknown' as 'online' | 'offline' | 'unknown',
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ì—Ä–∞–Ω–¥-–°–º–µ—Ç–∞ API
      if (this.config.grandSmeta.apiKey) {
        try {
          await this.grandSmetaClient.get('/health', { timeout: 5000 });
          services.grandSmeta = 'online';
        } catch {
          services.grandSmeta = 'offline';
        }
      } else {
        services.grandSmeta = 'offline';
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const onlineServices = Object.values(services).filter(status => status === 'online').length;
      const totalServices = Object.keys(services).length;

      let status: 'healthy' | 'partial' | 'unhealthy';
      if (onlineServices === totalServices) {
        status = 'healthy';
      } else if (onlineServices > 0) {
        status = 'partial';
      } else {
        status = 'unhealthy';
      }

      return { status, services };

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
      return {
        status: 'unhealthy',
        services,
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  getUsageStats(): {
    requests: number;
    errors: number;
    lastRequest: Date | null;
  } {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    return {
      requests: 0,
      errors: 0,
      lastRequest: null,
    };
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async shutdown(): Promise<void> {
    logger.info('üåê –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
    this.isInitialized = false;
    logger.info('‚úÖ –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É');
  }
}
