/**
 * Novita Provider Client for DeepSeek R1
 * HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek R1 —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä Novita
 */

import { config } from '../config/index.js';
import { logger } from '../utils/logger.js';

export interface NovitaMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface NovitaGenerationOptions {
  temperature?: number;
  maxTokens?: number;
  topP?: number;
  stream?: boolean;
}

export interface NovitaResponse {
  content: string;
  usage?: {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
  };
}

export interface NovitaStreamChunk {
  choices: Array<{
    delta: {
      content?: string;
    };
  }>;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek R1 —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä Novita
 */
export class NovitaClient {
  private readonly apiKey: string;
  private readonly baseUrl: string;
  private readonly modelName: string;

  constructor() {
    this.apiKey = config.ai.huggingface?.apiKey || process.env.HF_TOKEN || '';
    this.modelName = config.ai.huggingface?.modelName || 'deepseek/deepseek-r1-0528';

    // Novita API —á–µ—Ä–µ–∑ Hugging Face Router (OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
    this.baseUrl = 'https://router.huggingface.co/novita/v3/openai/chat/completions';

    if (!this.apiKey) {
      throw new Error('HF_TOKEN environment variable is required for Novita provider');
    }

    logger.info(`üöÄ Novita Client initialized`);
    logger.debug('üîß Novita config:', {
      modelName: this.modelName,
      hasApiKey: !!this.apiKey,
      baseUrl: this.baseUrl,
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ API
   */
  private async makeRequest(
    endpoint: string,
    payload: any,
    options: { stream?: boolean } = {}
  ): Promise<any> {
    const url = `${this.baseUrl}/${this.modelName}`;

    const headers = {
      'Authorization': `Bearer ${this.apiKey}`,
      'Content-Type': 'application/json',
      'User-Agent': 'estimate-service-mcp/1.0.0',
    };

    logger.debug('üåê Making request to Novita API:', {
      url,
      modelName: this.modelName,
      stream: options.stream,
    });

    const response = await fetch(url, {
      method: 'POST',
      headers,
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorText = await response.text();
      logger.error('‚ùå Novita API error:', {
        status: response.status,
        statusText: response.statusText,
        error: errorText,
      });

      throw new Error(`Novita API error ${response.status}: ${errorText}`);
    }

    if (options.stream) {
      return response;
    }

    return await response.json();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Novita API
   */
  async generateResponse(
    messages: NovitaMessage[],
    options: NovitaGenerationOptions = {}
  ): Promise<NovitaResponse> {
    const {
      temperature = 0.7,
      maxTokens = 1024,
      topP = 0.9,
      stream = false,
    } = options;

    const payload = {
      inputs: this.formatMessagesForNovita(messages),
      parameters: {
        temperature,
        max_new_tokens: maxTokens,
        top_p: topP,
        do_sample: true,
        return_full_text: false,
      },
      options: {
        use_cache: false,
        wait_for_model: true,
      },
    };

    try {
      if (stream) {
        return await this.generateStreamingResponse(payload);
      }

      const response = await this.makeRequest('', payload);

      // Hugging Face Inference API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º
      const result = Array.isArray(response) ? response[0] : response;
      const content = result.generated_text || result.text || '';

      logger.debug('‚úÖ Response generated successfully:', {
        contentLength: content.length,
      });

      return {
        content,
        usage: {
          promptTokens: 0, // API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
          completionTokens: 0,
          totalTokens: 0,
        },
      };
    } catch (error) {
      logger.error('‚ùå Failed to generate response:', error);
      throw error;
    }
  }

  /**
   * –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–ø–æ–∫–∞ —á—Ç–æ —ç–º—É–ª–∏—Ä—É–µ—Ç—Å—è)
   */
  private async generateStreamingResponse(payload: any): Promise<NovitaResponse> {
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ Inference API –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç streaming
    const response = await this.makeRequest('', payload);
    const result = Array.isArray(response) ? response[0] : response;
    const content = result.generated_text || result.text || '';

    return {
      content,
      usage: {
        promptTokens: 0,
        completionTokens: 0,
        totalTokens: 0,
      },
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Novita API
   */
  private formatMessagesForNovita(messages: NovitaMessage[]): string {
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω –ø—Ä–æ–º–ø—Ç
    let prompt = '';

    for (const message of messages) {
      switch (message.role) {
        case 'system':
          prompt += `System: ${message.content}\n\n`;
          break;
        case 'user':
          prompt += `Human: ${message.content}\n\n`;
          break;
        case 'assistant':
          prompt += `Assistant: ${message.content}\n\n`;
          break;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    prompt += 'Assistant: ';

    return prompt;
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
   */
  async testConnection(): Promise<void> {
    try {
      const testMessages: NovitaMessage[] = [
        {
          role: 'user',
          content: 'Hello, can you respond with just "OK"?',
        },
      ];

      const response = await this.generateResponse(testMessages, {
        temperature: 0.1,
        maxTokens: 10,
      });

      logger.info('üîó Novita API connection test successful');
      logger.debug('Test response:', response.content);
    } catch (error) {
      logger.error('üîó Novita API connection test failed:', error);
      throw new Error(`Failed to connect to Novita API: ${(error as Error).message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  getHealthStatus() {
    return {
      service: 'Novita Provider Client',
      status: 'ready',
      provider: 'novita',
      model: this.modelName,
      hasApiKey: !!this.apiKey,
      timestamp: new Date().toISOString(),
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const novitaClient = new NovitaClient();
