#!/usr/bin/env node

/**
 * HTTP Test Server for Local DeepSeek R1 MCP
 * HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';
import * as http from 'http';
import { logger } from './utils/logger.js';

/**
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
 */
const LOCAL_TOOLS = [
  {
    name: 'local_deepseek_chat',
    description: '–û–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é DeepSeek R1',
    inputSchema: {
      type: 'object',
      properties: {
        message: { type: 'string', description: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏' },
        context: { type: 'string', description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç' }
      },
      required: ['message']
    }
  },
  {
    name: 'local_deepseek_health_check',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏',
    inputSchema: {
      type: 'object',
      properties: {},
      additionalProperties: false
    }
  }
];

/**
 * –≠–º—É–ª—è—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1
 */
class LocalDeepSeekEmulator {
  private initialized = false;

  async initialize() {
    if (!this.initialized) {
      logger.info('ü§ó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1...');
      await new Promise(resolve => setTimeout(resolve, 500));
      this.initialized = true;
      logger.info('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ (—Ä–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏)');
    }
  }

  async chat(message: string, context?: string): Promise<string> {
    await this.initialize();

    // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    if (message.toLowerCase().includes('–∞–Ω–∞–ª–∏–∑') || message.toLowerCase().includes('analyze')) {
      return `üîç **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (DeepSeek R1 Local)**

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: "${message}"

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
1. –ö–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
2. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ TypeScript
3. –î–æ–±–∞–≤—å—Ç–µ unit-—Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ESLint/Prettier –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

${context ? `**–ö–æ–Ω—Ç–µ–∫—Å—Ç:** ${context}` : ''}

*–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é DeepSeek R1*`;
    }

    if (message.toLowerCase().includes('—Ç–µ—Å—Ç') || message.toLowerCase().includes('test')) {
      return `üß™ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ (DeepSeek R1 Local)**

\`\`\`typescript
describe('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', () => {
  test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', () => {
    // Arrange
    const input = { message: '${message}' };

    // Act
    const result = processInput(input);

    // Assert
    expect(result).toBeDefined();
    expect(result.success).toBe(true);
  });
});
\`\`\`

*–¢–µ—Å—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é DeepSeek R1*`;
    }

    return `ü§ñ **DeepSeek R1 (–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å)**

–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"

${context ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}\n\n` : ''}–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å:
- üìä –ê–Ω–∞–ª–∏–∑–æ–º –∫–æ–¥–∞
- üìö –ù–∞–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ—Å—Ç–æ–≤
- üîÑ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º
- üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏

*–†–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏*`;
  }

  getStatus() {
    return {
      status: this.initialized ? 'ready' : 'initializing',
      model: 'deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B',
      mode: 'local_emulation',
      initialized: this.initialized,
      features: ['code_analysis', 'documentation', 'test_generation', 'refactoring']
    };
  }
}

const localModel = new LocalDeepSeekEmulator();

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞
 */
function createMCPServer() {
  const server = new Server(
    {
      name: 'estimate-service-local-deepseek-http',
      version: '1.0.0',
      description: 'HTTP MCP server with local DeepSeek R1 emulation',
    }
  );

  // –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  server.setRequestHandler(ListToolsRequestSchema, async () => {
    logger.debug('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
    return { tools: LOCAL_TOOLS };
  });

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const { name, arguments: args } = request.params;
    logger.info(`üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${name}`);

    try {
      switch (name) {
        case 'local_deepseek_chat': {
          const { message, context } = args as { message: string; context?: string };
          const response = await localModel.chat(message, context);

          return {
            content: [
              {
                type: 'text',
                text: response,
              },
            ],
          };
        }

        case 'local_deepseek_health_check': {
          const status = localModel.getStatus();

          return {
            content: [
              {
                type: 'text',
                text: `# üíö –°—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1

**–°—Ç–∞—Ç—É—Å:** ${status.status}
**–ú–æ–¥–µ–ª—å:** ${status.model}
**–†–µ–∂–∏–º:** ${status.mode}
**–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:** ${status.initialized ? '‚úÖ' : '‚ùå'}
**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:** ${status.features.join(', ')}

${status.initialized ?
                    '‚úÖ **–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ**' :
                    '‚è≥ **–ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...**'
                  }

–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å DeepSeek R1 —Å Hugging Face.`,
              },
            ],
          };
        }

        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`);
      }
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${name}:`, error);
      return {
        content: [
          {
            type: 'text',
            text: `‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
      };
    }
  });

  return server;
}

/**
 * HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function main() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ HTTP MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π DeepSeek R1...');

  const server = createMCPServer();

  // HTTP —Å–µ—Ä–≤–µ—Ä
  const httpServer = http.createServer((req, res) => {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
      res.writeHead(200);
      res.end();
      return;
    }

    if (req.url === '/health') {
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({
        status: 'healthy',
        service: 'estimate-service-mcp-local',
        model: 'deepseek-r1-local-emulation',
        timestamp: new Date().toISOString()
      }));
      return;
    }

    if (req.url === '/') {
      res.writeHead(200, { 'Content-Type': 'text/html' });
      res.end(`
        <html>
          <head><title>Estimate Service MCP - Local DeepSeek R1</title></head>
          <body>
            <h1>ü§ñ Estimate Service MCP Server</h1>
            <h2>ü§ó –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å DeepSeek R1</h2>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ê–∫—Ç–∏–≤–µ–Ω</p>
            <p><strong>–†–µ–∂–∏–º:</strong> –õ–æ–∫–∞–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è</p>
            <p><strong>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</strong></p>
            <ul>
              <li>local_deepseek_chat - –û–±—â–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é</li>
              <li>local_deepseek_health_check - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞</li>
            </ul>
            <p><a href="/health">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</a></p>
          </body>
        </html>
      `);
      return;
    }

    res.writeHead(404);
    res.end('Not Found');
  });

  const PORT = 9460;
  httpServer.listen(PORT, () => {
    logger.info(`‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    logger.info(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    logger.info('ü§ó –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å DeepSeek R1 –≥–æ—Ç–æ–≤–∞ (—Ä–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏)');
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
  await localModel.initialize();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}
