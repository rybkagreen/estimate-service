#!/usr/bin/env node

/**
 * Estimate Service MCP Server
 * Model Context Protocol server –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Estimate Service
 * –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≤—Å–µ–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListResourcesRequestSchema,
  ListToolsRequestSchema,
  ReadResourceRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';

import { config } from './config/index.js';
import { setupTools } from './tools/index.js';
import { setupResources } from './resources/index.js';
import { setupServices } from './services/index.js';
import { logger } from './utils/logger.js';
import { ErrorHandler } from './utils/error-handler.js';
import { MetricsCollector } from './utils/metrics.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å MCP —Å–µ—Ä–≤–µ—Ä–∞ Estimate Service
 */
class EstimateServiceMCPServer {
  private server: Server;
  private metrics: MetricsCollector;
  private errorHandler: ErrorHandler;

  constructor() {
    this.server = new Server(
      {
        name: 'estimate-service-mcp',
        version: '1.0.0',
        description: 'MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Estimate Service —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º',
      },
      {
        capabilities: {
          tools: {},
          resources: {},
          prompts: {},
          logging: {},
        },
      }
    );

    this.metrics = new MetricsCollector();
    this.errorHandler = new ErrorHandler();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
   */
  async initialize(): Promise<void> {
    try {
      logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Estimate Service MCP Server...');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
      await setupServices(this.server, config);
      logger.info('‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      await setupTools(this.server, config);
      logger.info('‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
      await setupResources(this.server, config);
      logger.info('‚úÖ –†–µ—Å—É—Ä—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
      this.setupHandlers();
      logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

      logger.info('üéâ Estimate Service MCP Server —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      const startTime = Date.now();

      try {
        const tools = await this.server.listTools();
        this.metrics.recordToolListRequest(Date.now() - startTime);

        logger.debug(`üìã –ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (${tools.tools.length} tools)`);
        return tools;
      } catch (error) {
        this.errorHandler.handleError('list_tools', error);
        throw error;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const startTime = Date.now();
      const { name, arguments: args } = request.params;

      try {
        logger.info(`üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${name}`, { args });

        const result = await this.server.callTool(request.params);

        this.metrics.recordToolCall(name, Date.now() - startTime, true);
        logger.debug(`‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);

        return result;
      } catch (error) {
        this.metrics.recordToolCall(name, Date.now() - startTime, false);
        this.errorHandler.handleError(`tool_${name}`, error);

        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${name}:`, error);
        throw error;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    this.server.setRequestHandler(ListResourcesRequestSchema, async () => {
      const startTime = Date.now();

      try {
        const resources = await this.server.listResources();
        this.metrics.recordResourceListRequest(Date.now() - startTime);

        logger.debug(`üìö –ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ (${resources.resources.length} resources)`);
        return resources;
      } catch (error) {
        this.errorHandler.handleError('list_resources', error);
        throw error;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    this.server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
      const startTime = Date.now();
      const { uri } = request.params;

      try {
        logger.info(`üìñ –ß—Ç–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞: ${uri}`);

        const result = await this.server.readResource(request.params);

        this.metrics.recordResourceRead(uri, Date.now() - startTime, true);
        logger.debug(`‚úÖ –†–µ—Å—É—Ä—Å ${uri} –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);

        return result;
      } catch (error) {
        this.metrics.recordResourceRead(uri, Date.now() - startTime, false);
        this.errorHandler.handleError(`resource_${uri}`, error);

        logger.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ ${uri}:`, error);
        throw error;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.server.onerror = (error) => {
      logger.error('üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞:', error);
      this.errorHandler.handleError('connection', error);
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async start(): Promise<void> {
    try {
      await this.initialize();

      const transport = new StdioServerTransport();

      logger.info('üöÄ –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞...');
      logger.info(`üì° –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.server.host}:${config.server.port}`);
      logger.info(`ü§ñ AI Provider: DeepSeek R1 (${config.ai.deepseek.model})`);
      logger.info(`üóÑÔ∏è Database: ${config.database.url.replace(/\/\/.*@/, '//***@')}`);

      await this.server.connect(transport);

      logger.info('‚úÖ Estimate Service MCP Server –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

      // –ó–∞–ø—É—Å–∫ –º–µ—Ç—Ä–∏–∫ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
      if (config.development.enableMetrics) {
        this.startMetricsReporting();
      }

    } catch (error) {
      logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞:', error);
      process.exit(1);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫
   */
  private startMetricsReporting(): void {
    setInterval(() => {
      const metrics = this.metrics.getMetrics();
      logger.info('üìä –ú–µ—Ç—Ä–∏–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞:', metrics);
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
   */
  async shutdown(): Promise<void> {
    logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞...');

    try {
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
      await this.metrics.flush();

      // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await this.server.close();

      logger.info('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
const server = new EstimateServiceMCPServer();

process.on('SIGINT', async () => {
  logger.info('üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  await server.shutdown();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  logger.info('üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  await server.shutdown();
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  logger.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason, promise);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  server.start().catch((error) => {
    logger.error('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä:', error);
    process.exit(1);
  });
}

export { EstimateServiceMCPServer };
