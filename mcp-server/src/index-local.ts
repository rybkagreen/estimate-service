#!/usr/bin/env node

/**
 * Estimate Service MCP Server with Local DeepSeek R1
 * MCP —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1 —á–µ—Ä–µ–∑ Hugging Face
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';
import { huggingFaceLocalService } from './services/huggingface-local.service.js';
import { logger } from './utils/logger.js';

/**
 * Local DeepSeek R1 tools definitions
 */
const LOCAL_DEEPSEEK_TOOLS = [
  {
    name: 'local_deepseek_analyze_code',
    description: '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1',
    inputSchema: {
      type: 'object',
      properties: {
        code: { type: 'string', description: '–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' },
        context: { type: 'string', description: '–ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞' },
        language: { type: 'string', enum: ['typescript', 'javascript', 'react', 'nestjs', 'python'], description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è' }
      },
      required: ['code']
    }
  },
  {
    name: 'local_deepseek_generate_docs',
    description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1',
    inputSchema: {
      type: 'object',
      properties: {
        code: { type: 'string', description: '–ö–æ–¥ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' },
        type: { type: 'string', enum: ['function', 'class', 'component', 'api', 'module'], description: '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏' },
        format: { type: 'string', enum: ['jsdoc', 'markdown', 'typescript'], description: '–§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', default: 'jsdoc' }
      },
      required: ['code']
    }
  },
  {
    name: 'local_deepseek_generate_tests',
    description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1',
    inputSchema: {
      type: 'object',
      properties: {
        code: { type: 'string', description: '–ö–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤' },
        framework: { type: 'string', enum: ['jest', 'vitest', 'playwright', 'cypress'], description: '–¢–µ—Å—Ç–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫' },
        testType: { type: 'string', enum: ['unit', 'integration', 'e2e'], description: '–¢–∏–ø —Ç–µ—Å—Ç–æ–≤' },
        coverage: { type: 'boolean', description: '–í–∫–ª—é—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞', default: true }
      },
      required: ['code']
    }
  },
  {
    name: 'local_deepseek_refactor_code',
    description: '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1',
    inputSchema: {
      type: 'object',
      properties: {
        code: { type: 'string', description: '–ö–æ–¥ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞' },
        goals: { type: 'array', items: { type: 'string' }, description: '–¶–µ–ª–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞' },
        style: { type: 'string', enum: ['clean-code', 'performance', 'maintainability', 'readability'], description: '–°—Ç–∏–ª—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞' }
      },
      required: ['code']
    }
  },
  {
    name: 'local_deepseek_architecture_advice',
    description: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1',
    inputSchema: {
      type: 'object',
      properties: {
        description: { type: 'string', description: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã' },
        constraints: { type: 'array', items: { type: 'string' }, description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è' },
        domain: { type: 'string', enum: ['frontend', 'backend', 'fullstack', 'database', 'devops', 'mobile'], description: '–û–±–ª–∞—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏' },
        scale: { type: 'string', enum: ['small', 'medium', 'large', 'enterprise'], description: '–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ–µ–∫—Ç–∞' }
      },
      required: ['description']
    }
  },
  {
    name: 'local_deepseek_chat',
    description: '–û–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é DeepSeek R1',
    inputSchema: {
      type: 'object',
      properties: {
        message: { type: 'string', description: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è DeepSeek R1' },
        context: { type: 'string', description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç' },
        temperature: { type: 'number', minimum: 0, maximum: 1, description: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', default: 0.7 },
        maxTokens: { type: 'number', minimum: 1, maximum: 2048, description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤', default: 512 }
      },
      required: ['message']
    }
  },
  {
    name: 'local_deepseek_health_check',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1',
    inputSchema: {
      type: 'object',
      properties: {},
      additionalProperties: false
    }
  },
  {
    name: 'local_deepseek_code_review',
    description: '–ö–æ–¥-—Ä–µ–≤—å—é —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1',
    inputSchema: {
      type: 'object',
      properties: {
        code: { type: 'string', description: '–ö–æ–¥ –¥–ª—è —Ä–µ–≤—å—é' },
        checklist: { type: 'array', items: { type: 'string' }, description: '–ü—É–Ω–∫—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏' },
        severity: { type: 'string', enum: ['low', 'medium', 'high'], description: '–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏', default: 'medium' }
      },
      required: ['code']
    }
  }
];

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
 */
async function createServer(): Promise<Server> {
  const server = new Server(
    {
      name: 'estimate-service-local-deepseek',
      version: '1.0.0',
      description: 'MCP server with local DeepSeek R1 model support',
    }
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  server.setRequestHandler(ListToolsRequestSchema, async () => {
    logger.debug('üìã Listing available tools');
    return {
      tools: LOCAL_DEEPSEEK_TOOLS,
    };
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const { name, arguments: args } = request.params;

    logger.info(`üîß Tool called: ${name}`);
    logger.debug('üîß Tool arguments:', args);

    try {
      switch (name) {
        case 'local_deepseek_analyze_code':
          return await handleCodeAnalysis(args);

        case 'local_deepseek_generate_docs':
          return await handleDocumentationGeneration(args);

        case 'local_deepseek_generate_tests':
          return await handleTestGeneration(args);

        case 'local_deepseek_refactor_code':
          return await handleCodeRefactoring(args);

        case 'local_deepseek_architecture_advice':
          return await handleArchitectureAdvice(args);

        case 'local_deepseek_chat':
          return await handleChat(args);

        case 'local_deepseek_health_check':
          return await handleHealthCheck();

        case 'local_deepseek_code_review':
          return await handleCodeReview(args);

        default:
          throw new Error(`Unknown tool: ${name}`);
      }
    } catch (error) {
      logger.error(`‚ùå Tool execution error for ${name}:`, error);
      return {
        content: [
          {
            type: 'text',
            text: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${name}: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
      };
    }
  });

  return server;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
 */
async function handleCodeAnalysis(args: any) {
  const { code, context = '', language = 'typescript' } = args;

  const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—Ü–µ–Ω–∫—É:

1. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ (—á–∏—Ç–∞–µ–º–æ—Å—Ç—å, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
2. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –±–∞–≥–∏
3. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
4. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
5. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ best practices
6. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: ${language}
${context ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${context}` : ''}

–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:`;

  const response = await huggingFaceLocalService.generateResponse([
    { role: 'system', content: systemPrompt },
    { role: 'user', content: code }
  ]);

  return {
    content: [
      {
        type: 'text',
        text: `# üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (${language})\n\n${response}`,
      },
    ],
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */
async function handleDocumentationGeneration(args: any) {
  const { code, type = 'function', format = 'jsdoc' } = args;

  const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –°–æ–∑–¥–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:

–¢–∏–ø: ${type}
–§–æ—Ä–º–∞—Ç: ${format}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)

–ö–æ–¥ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`;

  const response = await huggingFaceLocalService.generateResponse([
    { role: 'system', content: systemPrompt },
    { role: 'user', content: code }
  ]);

  return {
    content: [
      {
        type: 'text',
        text: `# üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (${type}, ${format})\n\n${response}`,
      },
    ],
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
 */
async function handleTestGeneration(args: any) {
  const { code, framework = 'jest', testType = 'unit', coverage = true } = args;

  const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π comprehensive —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:

–§—Ä–µ–π–º–≤–æ—Ä–∫: ${framework}
–¢–∏–ø —Ç–µ—Å—Ç–æ–≤: ${testType}
–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: ${coverage ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ edge cases
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤
- –ú–æ–∫–∏ –∏ —Å—Ç–∞–±—ã –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫

–ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`;

  const response = await huggingFaceLocalService.generateResponse([
    { role: 'system', content: systemPrompt },
    { role: 'user', content: code }
  ]);

  return {
    content: [
      {
        type: 'text',
        text: `# üß™ –¢–µ—Å—Ç—ã (${framework}, ${testType})\n\n${response}`,
      },
    ],
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–¥–∞
 */
async function handleCodeRefactoring(args: any) {
  const { code, goals = [], style = 'clean-code' } = args;

  const goalsText = goals.length > 0 ? goals.join(', ') : '—É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞';
  const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–¥–∞. –ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞:

–¶–µ–ª–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: ${goalsText}
–°—Ç–∏–ª—å: ${style}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- –£–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –°–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º ${style}
- –û–±—ä—è—Å–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è

–ö–æ–¥ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:`;

  const response = await huggingFaceLocalService.generateResponse([
    { role: 'system', content: systemPrompt },
    { role: 'user', content: code }
  ]);

  return {
    content: [
      {
        type: 'text',
        text: `# üîÑ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ (${style})\n\n–¶–µ–ª–∏: ${goalsText}\n\n${response}`,
      },
    ],
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
 */
async function handleArchitectureAdvice(args: any) {
  const { description, constraints = [], domain = 'fullstack', scale = 'medium' } = args;

  const constraintsText = constraints.length > 0 ? constraints.join(', ') : '–Ω–µ—Ç –æ—Å–æ–±—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π';
  const systemPrompt = `–¢—ã - –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è. –î–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ:

–û–±–ª–∞—Å—Ç—å: ${domain}
–ú–∞—Å—à—Ç–∞–±: ${scale}
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${constraintsText}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:`;

  const response = await huggingFaceLocalService.generateResponse([
    { role: 'system', content: systemPrompt },
    { role: 'user', content: description }
  ]);

  return {
    content: [
      {
        type: 'text',
        text: `# üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (${domain}, ${scale})\n\n${response}`,
      },
    ],
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞
 */
async function handleChat(args: any) {
  const { message, context = '', temperature = 0.7, maxTokens = 512 } = args;

  const systemPrompt = `–¢—ã - DeepSeek R1, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è AI-–º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –ª–æ–∫–∞–ª—å–Ω–æ –∏ –ø–æ–º–æ–≥–∞–µ—à—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.

${context ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}` : ''}

–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ –∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.`;

  const response = await huggingFaceLocalService.generateResponse([
    { role: 'system', content: systemPrompt },
    { role: 'user', content: message }
  ], {
    temperature,
    maxTokens
  });

  return {
    content: [
      {
        type: 'text',
        text: `# ü§ñ DeepSeek R1 (Local)\n\n${response}`,
      },
    ],
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
 */
async function handleHealthCheck() {
  const health = await huggingFaceLocalService.healthCheck();

  return {
    content: [
      {
        type: 'text',
        text: `# üíö –°—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1

**–°—Ç–∞—Ç—É—Å:** ${health.status}
**–ú–æ–¥–µ–ª—å:** ${health.model}
**–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:** ${health.initialized ? '‚úÖ' : '‚ùå'}
**–†–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏:** ${health.mockMode ? 'üé≠' : 'ü§ñ'}

${health.mockMode ?
            '‚ö†Ô∏è **–†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏.** –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å.' :
            '‚úÖ **–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.**'
          }`,
      },
    ],
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥-—Ä–µ–≤—å—é
 */
async function handleCodeReview(args: any) {
  const { code, checklist = [], severity = 'medium' } = args;

  const checklistText = checklist.length > 0 ?
    `\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${checklist.join(', ')}` : '';

  const systemPrompt = `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∫–æ–¥-—Ä–µ–≤—å—é–µ—Ä. –ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–¥-—Ä–µ–≤—å—é:

–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏: ${severity}
${checklistText}

–ü—Ä–æ–≤–µ—Ä—å:
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏
- –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ —Å—Ç–∏–ª—å
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

–î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.

–ö–æ–¥ –¥–ª—è —Ä–µ–≤—å—é:`;

  const response = await huggingFaceLocalService.generateResponse([
    { role: 'system', content: systemPrompt },
    { role: 'user', content: code }
  ]);

  return {
    content: [
      {
        type: 'text',
        text: `# üëÄ –ö–æ–¥-—Ä–µ–≤—å—é (—É—Ä–æ–≤–µ–Ω—å: ${severity})\n\n${response}`,
      },
    ],
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
async function main() {
  logger.info('üöÄ Starting Estimate Service MCP Server with Local DeepSeek R1...');

  try {
    const server = await createServer();
    const transport = new StdioServerTransport();

    logger.info('‚úÖ MCP Server ready with local DeepSeek R1 support');
    logger.info('ü§ó Available tools: code analysis, documentation, tests, refactoring, architecture advice, chat, health check, code review');

    await server.connect(transport);
  } catch (error) {
    logger.error('‚ùå Failed to start MCP server:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  logger.info('üõë Shutting down MCP server...');
  await huggingFaceLocalService.dispose();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  logger.info('üõë Shutting down MCP server...');
  await huggingFaceLocalService.dispose();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    logger.error('‚ùå Fatal error:', error);
    process.exit(1);
  });
}

export { createServer, main };
