#!/usr/bin/env node

/**
 * MCP Server for DeepSeek R1 via Hugging Face API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É Hugging Face –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek R1
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} from '@modelcontextprotocol/sdk/types.js';

import { config } from './config/index.js';
import { novitaClient } from './services/novita-client.service.js';
import { logger } from './utils/logger.js';

/**
 * MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek R1 —á–µ—Ä–µ–∑ Hugging Face API
 */
class McpDeepSeekApiServer {
  private server: Server;

  constructor() {
    this.server = new Server(
      {
        name: 'estimate-service-deepseek-api',
        version: '1.0.0',
        description: 'MCP server with DeepSeek R1 via Hugging Face API',
      }
    );

    this.setupErrorHandling();
    this.setupToolHandlers();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  private setupErrorHandling(): void {
    this.server.onerror = (error) => {
      logger.error('‚ùå MCP Server error:', error);
    };

    process.on('SIGINT', async () => {
      logger.info('üõë Received SIGINT, shutting down gracefully...');
      await this.cleanup();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      logger.info('üõë Received SIGTERM, shutting down gracefully...');
      await this.cleanup();
      process.exit(0);
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ handlers –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  private setupToolHandlers(): void {
    // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
          {
            name: 'chat_with_deepseek',
            description: '–û–±—â–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é DeepSeek R1 —á–µ—Ä–µ–∑ Hugging Face API',
            inputSchema: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏',
                },
                system_prompt: {
                  type: 'string',
                  description: '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
                },
                temperature: {
                  type: 'number',
                  description: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-1.0)',
                  minimum: 0,
                  maximum: 1,
                },
                max_tokens: {
                  type: 'number',
                  description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤',
                },
                stream: {
                  type: 'boolean',
                  description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
                },
              },
              required: ['message'],
            },
          },
          {
            name: 'analyze_code',
            description: '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é DeepSeek R1',
            inputSchema: {
              type: 'object',
              properties: {
                code: {
                  type: 'string',
                  description: '–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                },
                language: {
                  type: 'string',
                  description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
                  default: 'typescript',
                },
                focus: {
                  type: 'string',
                  description: '–ù–∞ —á–µ–º —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ',
                  enum: ['performance', 'security', 'readability', 'best-practices', 'bugs'],
                },
              },
              required: ['code'],
            },
          },
          {
            name: 'generate_tests',
            description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–¥–∞',
            inputSchema: {
              type: 'object',
              properties: {
                code: {
                  type: 'string',
                  description: '–ö–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤',
                },
                language: {
                  type: 'string',
                  description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
                  default: 'typescript',
                },
                test_framework: {
                  type: 'string',
                  description: '–§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                  enum: ['jest', 'vitest', 'mocha', 'jasmine'],
                  default: 'jest',
                },
                coverage_type: {
                  type: 'string',
                  description: '–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏',
                  enum: ['unit', 'integration', 'e2e'],
                  default: 'unit',
                },
              },
              required: ['code'],
            },
          },
          {
            name: 'refactor_code',
            description: '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞',
            inputSchema: {
              type: 'object',
              properties: {
                code: {
                  type: 'string',
                  description: '–ö–æ–¥ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞',
                },
                language: {
                  type: 'string',
                  description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
                  default: 'typescript',
                },
                instructions: {
                  type: 'string',
                  description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞',
                },
                focus: {
                  type: 'string',
                  description: '–§–æ–∫—É—Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞',
                  enum: ['performance', 'readability', 'maintainability', 'patterns'],
                },
              },
              required: ['code'],
            },
          },
          {
            name: 'health_check',
            description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è DeepSeek API —Å–µ—Ä–≤–∏—Å–∞',
            inputSchema: {
              type: 'object',
              properties: {},
            },
          },
        ],
      };
    });

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case 'chat_with_deepseek':
            return await this.chatWithDeepSeek(args);
          case 'analyze_code':
            return await this.analyzeCode(args);
          case 'generate_tests':
            return await this.generateTests(args);
          case 'refactor_code':
            return await this.refactorCode(args);
          case 'health_check':
            return await this.healthCheck();
          default:
            throw new McpError(
              ErrorCode.MethodNotFound,
              `Unknown tool: ${name}`
            );
        }
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        logger.error(`‚ùå Tool execution failed: ${name}`, error);

        throw new McpError(
          ErrorCode.InternalError,
          `Tool execution failed: ${errorMessage}`
        );
      }
    });
  }

  /**
   * –û–±—â–µ–Ω–∏–µ —Å DeepSeek R1
   */
  private async chatWithDeepSeek(args: any) {
    const {
      message,
      system_prompt,
      temperature,
      max_tokens,
      stream = false,
    } = args;

    const messages = [];

    if (system_prompt) {
      messages.push({
        role: 'system' as const,
        content: system_prompt,
      });
    }

    messages.push({
      role: 'user' as const,
      content: message,
    });

    const response = await novitaClient.generateResponse(messages, {
      temperature,
      maxTokens: max_tokens,
      stream,
    });

    return {
      content: [
        {
          type: 'text',
          text: response.content,
        },
      ],
      isError: false,
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
   */
  private async analyzeCode(args: any) {
    const { code, language = 'typescript', focus } = args;

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ generateResponse
    const analysisMessages = [
      {
        role: 'system' as const,
        content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑.',
      },
      {
        role: 'user' as const,
        content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç ${language} –∫–æ–¥:\n\n\`\`\`${language}\n${code}\n\`\`\``,
      },
    ];

    const analysisResponse = await novitaClient.generateResponse(analysisMessages, {
      temperature: 0.3,
      maxTokens: 1024,
    });

    let analysis = analysisResponse.content;

    if (focus) {
      const focusPrompt = `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∞—Å–ø–µ–∫—Ç–µ: ${focus}`;
      const focusedAnalysis = await novitaClient.generateResponse([
        {
          role: 'system',
          content: focusPrompt,
        },
        {
          role: 'user',
          content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥:\n\n\`\`\`${language}\n${code}\n\`\`\``,
        },
      ], { temperature: 0.2 });

      analysis += '\n\n### –§–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:\n' + focusedAnalysis.content;
    }

    return {
      content: [
        {
          type: 'text',
          text: analysis,
        },
      ],
      isError: false,
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
   */
  private async generateTests(args: any) {
    const {
      code,
      language = 'typescript',
      test_framework = 'jest',
      coverage_type = 'unit',
    } = args;

    const messages = [
      {
        role: 'system' as const,
        content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –°–æ–∑–¥–∞–π ${coverage_type} —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ ${language} –∏—Å–ø–æ–ª—å–∑—É—è ${test_framework}.`,
      },
      {
        role: 'user' as const,
        content: `–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞:\n\n\`\`\`${language}\n${code}\n\`\`\``,
      },
    ];

    const response = await novitaClient.generateResponse(messages, {
      temperature: 0.2,
      maxTokens: 3072,
    });

    return {
      content: [
        {
          type: 'text',
          text: response.content,
        },
      ],
      isError: false,
    };
  }

  /**
   * –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞
   */
  private async refactorCode(args: any) {
    const {
      code,
      language = 'typescript',
      instructions,
      focus,
    } = args;

    // –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ generateResponse
    const refactorMessages = [
      {
        role: 'system' as const,
        content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–¥–∞. –£–ª—É—á—à–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.',
      },
      {
        role: 'user' as const,
        content: `–û—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —ç—Ç–æ—Ç ${language} –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º: ${instructions}\n\n\`\`\`${language}\n${code}\n\`\`\``,
      },
    ];

    const refactorResponse = await novitaClient.generateResponse(refactorMessages, {
      temperature: 0.2,
      maxTokens: 2048,
    });

    let refactoredCode = refactorResponse.content;

    if (focus) {
      const focusPrompt = `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞: ${focus}`;
      const focusedRefactorMessages = [
        {
          role: 'system' as const,
          content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–¥–∞. –£–ª—É—á—à–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞—Å–ø–µ–∫—Ç–µ.',
        },
        {
          role: 'user' as const,
          content: `–û—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —ç—Ç–æ—Ç ${language} –∫–æ–¥ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞: ${focusPrompt}\n\n\`\`\`${language}\n${code}\n\`\`\``,
        },
      ];

      const focusedRefactorResponse = await novitaClient.generateResponse(focusedRefactorMessages, {
        temperature: 0.2,
        maxTokens: 2048,
      });

      const focusedRefactor = focusedRefactorResponse.content;

      refactoredCode += '\n\n### –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ ' + focus + ':\n' + focusedRefactor;
    }

    return {
      content: [
        {
          type: 'text',
          text: refactoredCode,
        },
      ],
      isError: false,
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  private async healthCheck() {
    const status = novitaClient.getHealthStatus();

    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify(status, null, 2),
        },
      ],
      isError: false,
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async start(): Promise<void> {
    logger.info('üöÄ Starting MCP DeepSeek API Server...');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HuggingFace Novita API —Å–µ—Ä–≤–∏—Å–∞
      await novitaClient.testConnection();

      // –°–æ–∑–¥–∞–Ω–∏–µ transport
      const transport = new StdioServerTransport();

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∫ transport
      await this.server.connect(transport);

      logger.info('‚úÖ MCP DeepSeek API Server started successfully');
      logger.info(`ü§ñ Using model: ${config.ai.huggingface?.modelName}`);
      logger.info(`üîó API Mode: ${config.ai.huggingface?.useApi ? 'Enabled' : 'Disabled'}`);
    } catch (error) {
      logger.error('‚ùå Failed to start MCP DeepSeek API Server:', error);
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  private async cleanup(): Promise<void> {
    logger.info('üßπ Cleaning up MCP DeepSeek API Server...');

    try {
      // Novita client –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
      logger.info('‚úÖ MCP DeepSeek API Server cleanup completed');
    } catch (error) {
      logger.error('‚ùå Error during cleanup:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  const server = new McpDeepSeekApiServer();

  server.start().catch((error) => {
    logger.error('üí• Fatal error starting server:', error);
    process.exit(1);
  });
}

export { McpDeepSeekApiServer };
