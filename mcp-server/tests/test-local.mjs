#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1
 */

import { spawn } from 'child_process';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1...\n');

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
const testRequests = [
  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞',
    tool: 'local_deepseek_health_check',
    args: {}
  },
  {
    name: '–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç',
    tool: 'local_deepseek_chat',
    args: {
      message: '–ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–¥–∞?'
    }
  },
  {
    name: '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞',
    tool: 'local_deepseek_chat',
    args: {
      message: '–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ —ç—Ç–æ–≥–æ TypeScript –∫–æ–¥–∞',
      context: 'React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
    }
  },
  {
    name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤',
    tool: 'local_deepseek_chat',
    args: {
      message: '–°–æ–∑–¥–∞–π unit —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã'
    }
  }
];

async function testMCPServer() {
  const serverPath = join(__dirname, 'dist-simple', 'index-local-simple.js');

  console.log(`üìÇ –ü—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É: ${serverPath}`);
  console.log('üöÄ –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞...\n');

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  const server = spawn('node', [serverPath], {
    stdio: ['pipe', 'pipe', 'pipe'],
    env: {
      ...process.env,
      NODE_ENV: 'development',
      LOG_LEVEL: 'info'
    }
  });

  let serverReady = false;
  let testIndex = 0;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞
  server.stdout.on('data', (data) => {
    const output = data.toString();
    console.log('üì§ –°–µ—Ä–≤–µ—Ä:', output.trim());

    if (output.includes('MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤') && !serverReady) {
      serverReady = true;
      console.log('\n‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!\n');
      runNextTest();
    }
  });

  server.stderr.on('data', (data) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', data.toString().trim());
  });

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
  function runNextTest() {
    if (testIndex >= testRequests.length) {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
      server.kill();
      return;
    }

    const test = testRequests[testIndex++];
    console.log(`üîß –¢–µ—Å—Ç ${testIndex}: ${test.name}`);

    // –°–æ–∑–¥–∞–Ω–∏–µ MCP –∑–∞–ø—Ä–æ—Å–∞
    const request = {
      jsonrpc: '2.0',
      id: testIndex,
      method: 'tools/call',
      params: {
        name: test.tool,
        arguments: test.args
      }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    server.stdin.write(JSON.stringify(request) + '\n');

    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç
    setTimeout(runNextTest, 2000);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  server.on('close', (code) => {
    console.log(`\nüèÅ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
    process.exit(code || 0);
  });

  server.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP
  setTimeout(() => {
    console.log('üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');

    const initRequest = {
      jsonrpc: '2.0',
      id: 0,
      method: 'initialize',
      params: {
        protocolVersion: '2024-11-05',
        capabilities: {},
        clientInfo: {
          name: 'test-client',
          version: '1.0.0'
        }
      }
    };

    server.stdin.write(JSON.stringify(initRequest) + '\n');
  }, 1000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
process.on('SIGINT', () => {
  console.log('\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testMCPServer().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  process.exit(1);
});
