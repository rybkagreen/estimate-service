/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Hugging Face API —Ç–æ–∫–µ–Ω–∞
 */

import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.api' });

const HF_TOKEN = process.env.HF_TOKEN || process.env.HUGGINGFACE_API_KEY;

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Hugging Face API —Ç–æ–∫–µ–Ω–∞\n');

if (!HF_TOKEN) {
  console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ HF_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env.api —Ñ–∞–π–ª–µ');
  process.exit(1);
}

console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:');
console.log(`  - –î–ª–∏–Ω–∞: ${HF_TOKEN.length} —Å–∏–º–≤–æ–ª–æ–≤`);
console.log(`  - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: ${HF_TOKEN.substring(0, 10)}...`);
console.log(`  - –§–æ—Ä–º–∞—Ç: ${HF_TOKEN.startsWith('hf_') ? '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (hf_)' : '–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π'}`);
console.log('');

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ whoami API
async function testTokenValidity() {
  console.log('üîê –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞...');

  try {
    const response = await fetch('https://huggingface.co/api/whoami', {
      headers: {
        'Authorization': `Bearer ${HF_TOKEN}`,
      },
    });

    if (response.ok) {
      const userData = await response.json();
      console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
      console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name || 'N/A'}`);
      console.log(`   - –¢–∏–ø: ${userData.type || 'N/A'}`);
      console.log(`   - Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${userData.emailVerified ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   - –û—Ä–≥.: ${userData.orgs?.length || 0} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π`);
      return true;
    } else {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`   - –û—Ç–≤–µ—Ç: ${await response.text()}`);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Inference API
async function testInferenceAPI() {
  console.log('\nüß† –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Inference API...');

  // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testModel = 'microsoft/DialoGPT-medium';

  try {
    const response = await fetch(`https://api-inference.huggingface.co/models/${testModel}`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${HF_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inputs: 'Hello, this is a test',
        options: {
          wait_for_model: true,
          use_cache: false,
        },
      }),
    });

    if (response.ok) {
      console.log('‚úÖ Inference API –¥–æ—Å—Ç—É–ø–µ–Ω');
      const result = await response.json();
      console.log(`   - –¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: ${testModel}`);
      console.log(`   - –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${JSON.stringify(result).substring(0, 100)}...`);
      return true;
    } else {
      console.log('‚ùå Inference API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.status}`);
      const errorText = await response.text();
      console.log(`   - –û—à–∏–±–∫–∞: ${errorText}`);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Inference API:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ DeepSeek –º–æ–¥–µ–ª—è–º
async function testDeepSeekAccess() {
  console.log('\nü§ñ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ DeepSeek –º–æ–¥–µ–ª—è–º...');

  const deepseekModels = [
    'deepseek/deepseek-r1-0528',
    'deepseek/deepseek-r1-turbo',
    'deepseek-ai/DeepSeek-R1',
    'deepseek-ai/deepseek-coder-33b-instruct',
  ];

  for (const model of deepseekModels) {
    console.log(`\n   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å: ${model}`);

    try {
      const response = await fetch(`https://api-inference.huggingface.co/models/${model}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${HF_TOKEN}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          inputs: 'Test',
          options: {
            wait_for_model: true,
            use_cache: false,
          },
        }),
      });

      if (response.ok) {
        console.log(`   ‚úÖ ${model} - –¥–æ—Å—Ç—É–ø–Ω–∞`);
      } else if (response.status === 403) {
        console.log(`   üîí ${model} - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞)`);
      } else if (response.status === 404) {
        console.log(`   ‚ùì ${model} - –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        const errorText = await response.text();
        console.log(`   ‚ùå ${model} - –æ—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ${model} - –æ—à–∏–±–∫–∞: ${error.message}`);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç –∏ –ª–∏–º–∏—Ç–æ–≤
async function testQuotas() {
  console.log('\nüìä –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç –∏ –ª–∏–º–∏—Ç–æ–≤...');

  try {
    // –≠—Ç–æ—Ç endpoint –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—É–±–ª–∏—á–Ω–æ–º API, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º
    const response = await fetch('https://huggingface.co/api/spaces', {
      headers: {
        'Authorization': `Bearer ${HF_TOKEN}`,
      },
    });

    if (response.ok) {
      console.log('‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –±–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
    } else {
      console.log(`‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–≤–æ—Ç—ã:', error.message);
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
async function runDiagnostics() {
  const tokenValid = await testTokenValidity();

  if (tokenValid) {
    await testInferenceAPI();
    await testDeepSeekAccess();
    await testQuotas();
  }

  console.log('\nüìã –†–µ–∑—é–º–µ:');
  if (!tokenValid) {
    console.log('‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://huggingface.co/settings/tokens');
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ "Read"');
    console.log('   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω');
  } else {
    console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–æ–¥–µ–ª—è–º');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ Hugging Face Pro');
    console.log('   2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ https://huggingface.co/pricing –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—è–º');
  }
}

runDiagnostics().catch(console.error);
