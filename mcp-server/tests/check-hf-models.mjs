/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ Hugging Face
 */

import dotenv from 'dotenv';
dotenv.config({ path: '.env.api' });

const HF_TOKEN = process.env.HF_TOKEN;

if (!HF_TOKEN) {
  console.log('‚ùå HF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.api');
  process.exit(1);
}

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ Hugging Face...\n');

async function checkHuggingFaceModels() {
  const models = [
    'deepseek/deepseek-r1-0528',
    'deepseek/deepseek-r1-turbo',
    'deepseek-ai/DeepSeek-R1',
    'deepseek-ai/deepseek-coder-6.7b-instruct',
    'microsoft/DialoGPT-medium',
    'gpt2',
    'facebook/opt-350m'
  ];

  console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á: ${HF_TOKEN.substring(0, 10)}...`);
  console.log('');

  for (const model of models) {
    try {
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ${model}`);

      const url = `https://api-inference.huggingface.co/models/${model}`;

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${HF_TOKEN}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          inputs: 'Hello, how are you?',
          parameters: {
            max_new_tokens: 10,
            temperature: 0.7,
          },
        }),
      });

      if (response.ok) {
        const result = await response.json();
        console.log(`‚úÖ ${model} - –î–æ—Å—Ç—É–ø–Ω–∞!`);
        console.log(`   –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(result).substring(0, 100)}...`);
      } else {
        const error = await response.text();
        console.log(`‚ùå ${model} - –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (${response.status}): ${error.substring(0, 100)}`);
      }
    } catch (error) {
      console.log(`‚ùå ${model} - –û—à–∏–±–∫–∞: ${error.message}`);
    }

    console.log('');

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
async function checkApiKey() {
  try {
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞...');

    const response = await fetch('https://huggingface.co/api/whoami', {
      headers: {
        'Authorization': `Bearer ${HF_TOKEN}`,
      },
    });

    if (response.ok) {
      const userInfo = await response.json();
      console.log('‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω');
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo.name || userInfo.id || 'Unknown'}`);
      console.log(`üìß Email: ${userInfo.email || 'Not provided'}`);
      console.log(`üí∞ –¢–∏–ø: ${userInfo.type || 'Unknown'}`);
      console.log('');
    } else {
      console.log(`‚ùå API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (${response.status})`);
      const error = await response.text();
      console.log(`   –û—à–∏–±–∫–∞: ${error}`);
      console.log('');
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞: ${error.message}`);
    console.log('');
  }
}

async function main() {
  await checkApiKey();
  await checkHuggingFaceModels();

  console.log('üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á');
  console.log('2. –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ DeepSeek –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞');
  console.log('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –Ω–∞ https://huggingface.co/models');
}

main().catch(console.error);
