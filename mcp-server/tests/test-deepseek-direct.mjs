#!/usr/bin/env node

/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç DeepSeek API —á–µ—Ä–µ–∑ fetch (–±–µ–∑ OpenAI SDK)
 * –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */

import dotenv from 'dotenv';
import path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve('../.env') });

const apiKey = process.env.DEEPSEEK_API_KEY;
const baseUrl = process.env.DEEPSEEK_BASE_URL || 'https://api.deepseek.com/v1';

console.log('üß™ Testing DeepSeek API directly with fetch...\n');
console.log(`üîó Base URL: ${baseUrl}`);
console.log(`üîë API Key: ${apiKey?.slice(0, 8)}...${apiKey?.slice(-4)}`);

if (!apiKey) {
  console.error('‚ùå DEEPSEEK_API_KEY is required');
  process.exit(1);
}

// 1. –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API (—Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π)
console.log('\nüìã Testing /models endpoint...');
try {
  const response = await fetch(`${baseUrl}/models`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    }
  });

  console.log(`Status: ${response.status} ${response.statusText}`);

  if (!response.ok) {
    const errorText = await response.text();
    console.error(`‚ùå Models API Error:`, errorText);
  } else {
    const models = await response.json();
    console.log('‚úÖ Available models:');
    if (models.data && Array.isArray(models.data)) {
      models.data.forEach(model => {
        console.log(`  - ${model.id}`);
      });
    } else {
      console.log('Raw response:', models);
    }
  }
} catch (error) {
  console.error('‚ùå Network error:', error.message);
}

// 2. –¢–µ—Å—Ç chat completion
console.log('\nüí¨ Testing /chat/completions endpoint...');
try {
  const chatResponse = await fetch(`${baseUrl}/chat/completions`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'deepseek-chat',
      messages: [
        {
          role: 'user',
          content: 'Hello! Respond with "API working" if you can hear me.'
        }
      ],
      max_tokens: 20,
      temperature: 0
    })
  });

  console.log(`Status: ${chatResponse.status} ${chatResponse.statusText}`);

  if (!chatResponse.ok) {
    const errorText = await chatResponse.text();
    console.error(`‚ùå Chat API Error:`, errorText);

    // –ü–∞—Ä—Å–∏–º JSON –æ—à–∏–±–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    try {
      const errorData = JSON.parse(errorText);
      console.log('\nüîç Error details:');
      console.log(`  Type: ${errorData.error?.type}`);
      console.log(`  Code: ${errorData.error?.code}`);
      console.log(`  Message: ${errorData.error?.message}`);

      if (errorData.error?.code === 'insufficient_balance') {
        console.log('\nüí≥ –†–ï–®–ï–ù–ò–ï: –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ https://platform.deepseek.com');
      }
      if (errorData.error?.code === 'invalid_api_key') {
        console.log('\nüîë –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –Ω–∞ https://platform.deepseek.com/api-keys');
      }
    } catch (parseError) {
      console.log('Could not parse error as JSON');
    }
  } else {
    const chatData = await chatResponse.json();
    console.log('‚úÖ Chat API Success!');
    console.log(`Response: "${chatData.choices[0]?.message?.content}"`);
    console.log(`Usage:`, chatData.usage);
  }
} catch (error) {
  console.error('‚ùå Network error:', error.message);
}

// 3. –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
console.log('\nüë§ Testing user info endpoint...');
try {
  const userResponse = await fetch(`${baseUrl}/users/me`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    }
  });

  console.log(`Status: ${userResponse.status} ${userResponse.statusText}`);

  if (!userResponse.ok) {
    const errorText = await userResponse.text();
    console.log(`‚ÑπÔ∏è User info not available: ${errorText}`);
  } else {
    const userData = await userResponse.json();
    console.log('‚úÖ User info:', userData);
  }
} catch (error) {
  console.log('‚ÑπÔ∏è User info endpoint not available');
}

console.log('\nüèÅ Direct API test completed!');
console.log('\nüìù Next steps:');
console.log('1. If you see "insufficient_balance" - add credits to your DeepSeek account');
console.log('2. If you see "invalid_api_key" - generate a new key at platform.deepseek.com');
console.log('3. If you see success - your API is working correctly!');
