/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å DeepSeek R1 —á–µ—Ä–µ–∑ Hugging Face API
 */

import { config } from './dist-api/config/index.js';
import { novitaClient } from './dist-api/services/novita-client.service.js';

console.log('üß™ Testing DeepSeek R1 via Hugging Face API...\n');

async function testHuggingFaceApi() {
  try {
    console.log('üìã Configuration:');
    console.log(`  - Model: ${config.ai.huggingface?.modelName}`);
    console.log(`  - Use API: ${config.ai.huggingface?.useApi}`);
    console.log(`  - Mock Mode: ${config.ai.huggingface?.mockMode}`);
    console.log(`  - Has API Key: ${!!config.ai.huggingface?.apiKey}`);
    console.log('');

    if (!config.ai.huggingface?.apiKey) {
      console.log('‚ùå –û—à–∏–±–∫–∞: HF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ HF_TOKEN –≤ .env.api —Ñ–∞–π–ª–µ –∏–ª–∏ environment variable');
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    console.log('üöÄ Testing Novita API connection...');
    await novitaClient.testConnection();
    console.log('‚úÖ Connection test successful\n');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç
    console.log('üó£Ô∏è  Test 1: Simple chat');
    const chatResponse = await novitaClient.generateResponse([
      {
        role: 'user',
        content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ.',
      },
    ], {
      temperature: 0.7,
      maxTokens: 200,
    });

    console.log('Response:', chatResponse.content);
    if (chatResponse.usage) {
      console.log('Usage:', chatResponse.usage);
    }
    console.log('');

    // –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    console.log('üîç Test 2: Code analysis');
    const codeToAnalyze = `
function fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}
`;

    const analysisResponse = await novitaClient.generateResponse([
      {
        role: 'system',
        content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥.',
      },
      {
        role: 'user',
        content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç JavaScript –∫–æ–¥:\n\n\`\`\`javascript\n${codeToAnalyze}\n\`\`\``,
      },
    ], {
      temperature: 0.3,
      maxTokens: 500,
    });

    console.log('Analysis:', analysisResponse.content.substring(0, 300) + '...');
    console.log('');

    // –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
    console.log('üß™ Test 3: Test generation');
    const testsResponse = await novitaClient.generateResponse([
      {
        role: 'system',
        content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.',
      },
      {
        role: 'user',
        content: `–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ JavaScript –∫–æ–¥–∞:\n\n\`\`\`javascript\n${codeToAnalyze}\n\`\`\``,
      },
    ], {
      temperature: 0.2,
      maxTokens: 800,
    });

    console.log('Generated tests:', testsResponse.content.substring(0, 300) + '...');
    console.log('');

    // –¢–µ—Å—Ç 4: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
    console.log('üîß Test 4: Code refactoring');
    const refactorResponse = await novitaClient.generateResponse([
      {
        role: 'system',
        content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–¥–∞. –£–ª—É—á—à–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥.',
      },
      {
        role: 'user',
        content: `–û—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —ç—Ç–æ—Ç JavaScript –∫–æ–¥ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n\`\`\`javascript\n${codeToAnalyze}\n\`\`\``,
      },
    ], {
      temperature: 0.2,
      maxTokens: 800,
    });

    console.log('Refactored code:', refactorResponse.content.substring(0, 300) + '...');
    console.log('');

    // –¢–µ—Å—Ç 5: Health check
    console.log('üíö Test 5: Health check');
    const healthStatus = novitaClient.getHealthStatus();
    console.log('Health status:', JSON.stringify(healthStatus, null, 2));
    console.log('');

    console.log('‚úÖ All tests completed successfully!');

  } catch (error) {
    console.error('‚ùå Test failed:', error);

    if (error.message?.includes('authentication')) {
      console.log('\nüí° Tip: Make sure your HF_TOKEN is valid and has appropriate permissions');
    }

    if (error.message?.includes('quota') || error.message?.includes('rate limit')) {
      console.log('\nüí° Tip: You may have exceeded API rate limits or quota');
    }
  } finally {
    // Cleanup - Novita client –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    console.log('üßπ Cleanup completed');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testHuggingFaceApi();
